with recover rules:  {
 "follow": {
  "sample_0": [
   "$"
  ],
  "header_2": [
   ";"
  ],
  "header_0": [
   "A"
  ],
  "header_1": [
   ";"
  ],
  "complex_item_1": [
   ";",
   "|"
  ],
  "complex_item_0": [
   ";"
  ],
  "complex_item_3": [
   ";",
   "|"
  ],
  "complex_item_2": [
   ";"
  ],
  "item_with_bracket_items_0": [
   ")"
  ],
  "item_with_bracket_items_1": [
   ")"
  ],
  "item_0": [
   ")",
   ";",
   "|",
   "eps",
   "A",
   "("
  ],
  "item_with_bracket_0": [
   ";",
   "A",
   "eps",
   "(",
   ")",
   "|",
   "*",
   "+",
   "?"
  ],
  "grammar_rule_0": [
   "$",
   "A"
  ],
  "main_0": [
   "$"
  ],
  "main_1": [
   "$"
  ],
  "item_with_bracket_or_0": [
   ")"
  ],
  "item_with_bracket_or_1": [
   ")"
  ],
  "item_with_bracket_or_2": [
   ")",
   "|"
  ],
  "item_with_bracket_or_3": [
   ")",
   "|"
  ],
  "item_6": [
   ";",
   "A",
   "eps",
   "(",
   ")",
   "|",
   "*",
   "+",
   "?"
  ],
  "item_4": [
   ";",
   "eps",
   "(",
   ")",
   "|",
   "A"
  ],
  "item_5": [
   ";",
   "A",
   "eps",
   "(",
   ")",
   "|",
   "*",
   "+",
   "?"
  ],
  "item_2": [
   ";",
   "A",
   "eps",
   "(",
   ")",
   "|",
   "*",
   "+",
   "?"
  ],
  "item_3": [
   ";",
   "eps",
   "(",
   ")",
   "|",
   "A"
  ],
  "item_with_bracket_1": [
   ")"
  ],
  "item_1": [
   ";",
   "eps",
   "(",
   ")",
   "|",
   "A"
  ]
 },
 "terminals": [
  "non-terminal",
  "terminal",
  "A",
  ",",
  ";",
  "::=",
  "eps",
  "(",
  ")",
  "|",
  "*",
  "+",
  "?",
  "$"
 ],
 "table": {
  "sample_0": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": [
    "header_0",
    "main_0"
   ],
   ";": null,
   "?": null,
   "|": null
  },
  "header_2": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": [
    "<,>",
    "<A>",
    "header_2"
   ],
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": [],
   "?": null,
   "|": null
  },
  "header_0": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": [
    "<non-terminal>",
    "<A>",
    "header_1",
    "<;>",
    "<terminal>",
    "<A>",
    "header_2",
    "<;>"
   ],
   ";": null,
   "?": null,
   "|": null
  },
  "header_1": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": [
    "<,>",
    "<A>",
    "header_1"
   ],
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": [],
   "?": null,
   "|": null
  },
  "complex_item_1": {
   "A": [
    "item_0",
    "complex_item_1"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": [
    "item_0",
    "complex_item_1"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_0",
    "complex_item_1"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": [],
   "?": null,
   "|": []
  },
  "complex_item_0": {
   "A": [
    "item_0",
    "complex_item_1",
    "complex_item_2"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": [
    "item_0",
    "complex_item_1",
    "complex_item_2"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_0",
    "complex_item_1",
    "complex_item_2"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "complex_item_3": {
   "A": [
    "item_0",
    "complex_item_3"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": [
    "item_0",
    "complex_item_3"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_0",
    "complex_item_3"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": [],
   "?": null,
   "|": []
  },
  "complex_item_2": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": [],
   "?": null,
   "|": [
    "<|>",
    "item_0",
    "complex_item_3",
    "complex_item_2"
   ]
  },
  "item_with_bracket_items_0": {
   "A": [
    "item_with_bracket_items_1"
   ],
   "::=": null,
   "$": null,
   ")": [
    "item_with_bracket_items_1"
   ],
   "(": [
    "item_with_bracket_items_1"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_with_bracket_items_1"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "item_with_bracket_items_1": {
   "A": [
    "item_0",
    "item_with_bracket_items_1"
   ],
   "::=": null,
   "$": null,
   ")": [],
   "(": [
    "item_0",
    "item_with_bracket_items_1"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_0",
    "item_with_bracket_items_1"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "item_0": {
   "A": [
    "item_1"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": [
    "item_1"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_1"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "item_with_bracket_0": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": [
    "<(>",
    "item_0",
    "item_with_bracket_1",
    "<)>"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "grammar_rule_0": {
   "A": [
    "<A>",
    "<::=>",
    "complex_item_0",
    "<;>"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "main_0": {
   "A": [
    "grammar_rule_0",
    "main_1"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "main_1": {
   "A": [
    "grammar_rule_0",
    "main_1"
   ],
   "::=": null,
   "$": [],
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "item_with_bracket_or_0": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": [
    "<|>",
    "item_0",
    "item_with_bracket_or_2",
    "item_with_bracket_or_1"
   ]
  },
  "item_with_bracket_or_1": {
   "A": null,
   "::=": null,
   "$": null,
   ")": [],
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": [
    "<|>",
    "item_0",
    "item_with_bracket_or_3",
    "item_with_bracket_or_1"
   ]
  },
  "item_with_bracket_or_2": {
   "A": [
    "item_0",
    "item_with_bracket_or_2"
   ],
   "::=": null,
   "$": null,
   ")": [],
   "(": [
    "item_0",
    "item_with_bracket_or_2"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_0",
    "item_with_bracket_or_2"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": []
  },
  "item_with_bracket_or_3": {
   "A": [
    "item_0",
    "item_with_bracket_or_3"
   ],
   "::=": null,
   "$": null,
   ")": [],
   "(": [
    "item_0",
    "item_with_bracket_or_3"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_0",
    "item_with_bracket_or_3"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": []
  },
  "item_6": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": [
    "<+>"
   ],
   "*": [
    "<*>"
   ],
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": [
    "<?>"
   ],
   "|": null
  },
  "item_4": {
   "A": [],
   "::=": null,
   "$": null,
   ")": [],
   "(": [],
   "+": [
    "item_6",
    "item_4"
   ],
   "*": [
    "item_6",
    "item_4"
   ],
   ",": null,
   "eps": [],
   "terminal": null,
   "non-terminal": null,
   ";": [],
   "?": [
    "item_6",
    "item_4"
   ],
   "|": []
  },
  "item_5": {
   "A": null,
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": [
    "<+>"
   ],
   "*": [
    "<*>"
   ],
   ",": null,
   "eps": null,
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": [
    "<?>"
   ],
   "|": null
  },
  "item_2": {
   "A": [
    "<A>"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "<eps>"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "item_3": {
   "A": [],
   "::=": null,
   "$": null,
   ")": [],
   "(": [],
   "+": [
    "item_5",
    "item_3"
   ],
   "*": [
    "item_5",
    "item_3"
   ],
   ",": null,
   "eps": [],
   "terminal": null,
   "non-terminal": null,
   ";": [],
   "?": [
    "item_5",
    "item_3"
   ],
   "|": []
  },
  "item_with_bracket_1": {
   "A": [
    "item_with_bracket_items_0"
   ],
   "::=": null,
   "$": null,
   ")": [
    "item_with_bracket_items_0"
   ],
   "(": [
    "item_with_bracket_items_0"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_with_bracket_items_0"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": [
    "item_with_bracket_or_0"
   ]
  },
  "item_1": {
   "A": [
    "item_2",
    "item_3"
   ],
   "::=": null,
   "$": null,
   ")": null,
   "(": [
    "item_with_bracket_0",
    "item_4"
   ],
   "+": null,
   "*": null,
   ",": null,
   "eps": [
    "item_2",
    "item_3"
   ],
   "terminal": null,
   "non-terminal": null,
   ";": null,
   "?": null,
   "|": null
  },
  "<non-terminal>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<terminal>": {
   "non-terminal": null,
   "terminal": [
    "terminal"
   ],
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<A>": {
   "non-terminal": null,
   "terminal": null,
   "A": [
    "A"
   ],
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<,>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": [
    ","
   ],
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<;>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": [
    ";"
   ],
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<::=>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": [
    "::="
   ],
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<eps>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": [
    "eps"
   ],
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<(>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": [
    "("
   ],
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<)>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": [
    ")"
   ],
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<|>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": [
    "|"
   ],
   "*": null,
   "+": null,
   "?": null,
   "$": null
  },
  "<*>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": [
    "*"
   ],
   "+": null,
   "?": null,
   "$": null
  },
  "<+>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": [
    "+"
   ],
   "?": null,
   "$": null
  },
  "<?>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": [
    "?"
   ],
   "$": null
  },
  "<$>": {
   "non-terminal": null,
   "terminal": null,
   "A": null,
   ",": null,
   ";": null,
   "::=": null,
   "eps": null,
   "(": null,
   ")": null,
   "|": null,
   "*": null,
   "+": null,
   "?": null,
   "$": []
  }
 },
 "axiom": "sample_0",
 "first": {
  "sample_0": [
   "non-terminal"
  ],
  "header_2": [
   null,
   ","
  ],
  "header_0": [
   "non-terminal"
  ],
  "header_1": [
   null,
   ","
  ],
  "complex_item_1": [
   "eps",
   "A",
   "(",
   null
  ],
  "complex_item_0": [
   "eps",
   "A",
   "("
  ],
  "complex_item_3": [
   "eps",
   "A",
   "(",
   null
  ],
  "complex_item_2": [
   "|",
   null
  ],
  "item_with_bracket_items_0": [
   "eps",
   "(",
   null,
   "A"
  ],
  "item_with_bracket_items_1": [
   "eps",
   "A",
   "(",
   null
  ],
  "item_0": [
   "eps",
   "A",
   "("
  ],
  "item_with_bracket_0": [
   "("
  ],
  "grammar_rule_0": [
   "A"
  ],
  "main_0": [
   "A"
  ],
  "main_1": [
   "A",
   null
  ],
  "item_with_bracket_or_0": [
   "|"
  ],
  "item_with_bracket_or_1": [
   "|",
   null
  ],
  "item_with_bracket_or_2": [
   "eps",
   "A",
   "(",
   null
  ],
  "item_with_bracket_or_3": [
   "eps",
   "A",
   "(",
   null
  ],
  "item_6": [
   "+",
   "?",
   "*"
  ],
  "item_4": [
   null,
   "*",
   "+",
   "?"
  ],
  "item_5": [
   "+",
   "?",
   "*"
  ],
  "item_2": [
   "eps",
   "A"
  ],
  "item_3": [
   null,
   "*",
   "+",
   "?"
  ],
  "item_with_bracket_1": [
   "|",
   "eps",
   "A",
   "(",
   null
  ],
  "item_1": [
   "eps",
   "A",
   "("
  ]
 },
 "recover": {
  "sample_0": {
   "A": [
    "A",
    "sample_0"
   ],
   "::=": [
    "::=",
    "sample_0"
   ],
   "$": [],
   ")": [
    ")",
    "sample_0"
   ],
   "(": [
    "(",
    "sample_0"
   ],
   "+": [
    "+",
    "sample_0"
   ],
   "*": [
    "*",
    "sample_0"
   ],
   ",": [
    ",",
    "sample_0"
   ],
   "eps": [
    "eps",
    "sample_0"
   ],
   "terminal": [
    "terminal",
    "sample_0"
   ],
   "non-terminal": null,
   ";": [
    ";",
    "sample_0"
   ],
   "?": [
    "?",
    "sample_0"
   ],
   "|": [
    "|",
    "sample_0"
   ]
  },
  "header_2": {
   "A": [
    "A",
    "header_2"
   ],
   "::=": [
    "::=",
    "header_2"
   ],
   "$": [],
   ")": [
    ")",
    "header_2"
   ],
   "(": [
    "(",
    "header_2"
   ],
   "+": [
    "+",
    "header_2"
   ],
   "*": [
    "*",
    "header_2"
   ],
   ",": null,
   "eps": [
    "eps",
    "header_2"
   ],
   "terminal": [
    "terminal",
    "header_2"
   ],
   "non-terminal": [
    "non-terminal",
    "header_2"
   ],
   ";": null,
   "?": [
    "?",
    "header_2"
   ],
   "|": [
    "|",
    "header_2"
   ]
  },
  "header_0": {
   "A": [],
   "::=": [
    "::=",
    "header_0"
   ],
   "$": [],
   ")": [
    ")",
    "header_0"
   ],
   "(": [
    "(",
    "header_0"
   ],
   "+": [
    "+",
    "header_0"
   ],
   "*": [
    "*",
    "header_0"
   ],
   ",": [
    ",",
    "header_0"
   ],
   "eps": [
    "eps",
    "header_0"
   ],
   "terminal": [
    "terminal",
    "header_0"
   ],
   "non-terminal": null,
   ";": [
    ";",
    "header_0"
   ],
   "?": [
    "?",
    "header_0"
   ],
   "|": [
    "|",
    "header_0"
   ]
  },
  "header_1": {
   "A": [
    "A",
    "header_1"
   ],
   "::=": [
    "::=",
    "header_1"
   ],
   "$": [],
   ")": [
    ")",
    "header_1"
   ],
   "(": [
    "(",
    "header_1"
   ],
   "+": [
    "+",
    "header_1"
   ],
   "*": [
    "*",
    "header_1"
   ],
   ",": null,
   "eps": [
    "eps",
    "header_1"
   ],
   "terminal": [
    "terminal",
    "header_1"
   ],
   "non-terminal": [
    "non-terminal",
    "header_1"
   ],
   ";": null,
   "?": [
    "?",
    "header_1"
   ],
   "|": [
    "|",
    "header_1"
   ]
  },
  "complex_item_1": {
   "A": null,
   "::=": [
    "::=",
    "complex_item_1"
   ],
   "$": [],
   ")": [
    ")",
    "complex_item_1"
   ],
   "(": null,
   "+": [
    "+",
    "complex_item_1"
   ],
   "*": [
    "*",
    "complex_item_1"
   ],
   ",": [
    ",",
    "complex_item_1"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "complex_item_1"
   ],
   "non-terminal": [
    "non-terminal",
    "complex_item_1"
   ],
   ";": null,
   "?": [
    "?",
    "complex_item_1"
   ],
   "|": null
  },
  "complex_item_0": {
   "A": null,
   "::=": [
    "::=",
    "complex_item_0"
   ],
   "$": [],
   ")": [
    ")",
    "complex_item_0"
   ],
   "(": null,
   "+": [
    "+",
    "complex_item_0"
   ],
   "*": [
    "*",
    "complex_item_0"
   ],
   ",": [
    ",",
    "complex_item_0"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "complex_item_0"
   ],
   "non-terminal": [
    "non-terminal",
    "complex_item_0"
   ],
   ";": [],
   "?": [
    "?",
    "complex_item_0"
   ],
   "|": [
    "|",
    "complex_item_0"
   ]
  },
  "complex_item_3": {
   "A": null,
   "::=": [
    "::=",
    "complex_item_3"
   ],
   "$": [],
   ")": [
    ")",
    "complex_item_3"
   ],
   "(": null,
   "+": [
    "+",
    "complex_item_3"
   ],
   "*": [
    "*",
    "complex_item_3"
   ],
   ",": [
    ",",
    "complex_item_3"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "complex_item_3"
   ],
   "non-terminal": [
    "non-terminal",
    "complex_item_3"
   ],
   ";": null,
   "?": [
    "?",
    "complex_item_3"
   ],
   "|": null
  },
  "complex_item_2": {
   "A": [
    "A",
    "complex_item_2"
   ],
   "::=": [
    "::=",
    "complex_item_2"
   ],
   "$": [],
   ")": [
    ")",
    "complex_item_2"
   ],
   "(": [
    "(",
    "complex_item_2"
   ],
   "+": [
    "+",
    "complex_item_2"
   ],
   "*": [
    "*",
    "complex_item_2"
   ],
   ",": [
    ",",
    "complex_item_2"
   ],
   "eps": [
    "eps",
    "complex_item_2"
   ],
   "terminal": [
    "terminal",
    "complex_item_2"
   ],
   "non-terminal": [
    "non-terminal",
    "complex_item_2"
   ],
   ";": null,
   "?": [
    "?",
    "complex_item_2"
   ],
   "|": null
  },
  "item_with_bracket_items_0": {
   "A": null,
   "::=": [
    "::=",
    "item_with_bracket_items_0"
   ],
   "$": [],
   ")": null,
   "(": null,
   "+": [
    "+",
    "item_with_bracket_items_0"
   ],
   "*": [
    "*",
    "item_with_bracket_items_0"
   ],
   ",": [
    ",",
    "item_with_bracket_items_0"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_with_bracket_items_0"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_items_0"
   ],
   ";": [
    ";",
    "item_with_bracket_items_0"
   ],
   "?": [
    "?",
    "item_with_bracket_items_0"
   ],
   "|": [
    "|",
    "item_with_bracket_items_0"
   ]
  },
  "item_with_bracket_items_1": {
   "A": null,
   "::=": [
    "::=",
    "item_with_bracket_items_1"
   ],
   "$": [],
   ")": null,
   "(": null,
   "+": [
    "+",
    "item_with_bracket_items_1"
   ],
   "*": [
    "*",
    "item_with_bracket_items_1"
   ],
   ",": [
    ",",
    "item_with_bracket_items_1"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_with_bracket_items_1"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_items_1"
   ],
   ";": [
    ";",
    "item_with_bracket_items_1"
   ],
   "?": [
    "?",
    "item_with_bracket_items_1"
   ],
   "|": [
    "|",
    "item_with_bracket_items_1"
   ]
  },
  "item_0": {
   "A": null,
   "::=": [
    "::=",
    "item_0"
   ],
   "$": [],
   ")": [],
   "(": null,
   "+": [
    "+",
    "item_0"
   ],
   "*": [
    "*",
    "item_0"
   ],
   ",": [
    ",",
    "item_0"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_0"
   ],
   "non-terminal": [
    "non-terminal",
    "item_0"
   ],
   ";": [],
   "?": [
    "?",
    "item_0"
   ],
   "|": []
  },
  "item_with_bracket_0": {
   "A": [],
   "::=": [
    "::=",
    "item_with_bracket_0"
   ],
   "$": [],
   ")": [],
   "(": null,
   "+": [],
   "*": [],
   ",": [
    ",",
    "item_with_bracket_0"
   ],
   "eps": [],
   "terminal": [
    "terminal",
    "item_with_bracket_0"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_0"
   ],
   ";": [],
   "?": [],
   "|": []
  },
  "grammar_rule_0": {
   "A": null,
   "::=": [
    "::=",
    "grammar_rule_0"
   ],
   "$": [],
   ")": [
    ")",
    "grammar_rule_0"
   ],
   "(": [
    "(",
    "grammar_rule_0"
   ],
   "+": [
    "+",
    "grammar_rule_0"
   ],
   "*": [
    "*",
    "grammar_rule_0"
   ],
   ",": [
    ",",
    "grammar_rule_0"
   ],
   "eps": [
    "eps",
    "grammar_rule_0"
   ],
   "terminal": [
    "terminal",
    "grammar_rule_0"
   ],
   "non-terminal": [
    "non-terminal",
    "grammar_rule_0"
   ],
   ";": [
    ";",
    "grammar_rule_0"
   ],
   "?": [
    "?",
    "grammar_rule_0"
   ],
   "|": [
    "|",
    "grammar_rule_0"
   ]
  },
  "main_0": {
   "A": null,
   "::=": [
    "::=",
    "main_0"
   ],
   "$": [],
   ")": [
    ")",
    "main_0"
   ],
   "(": [
    "(",
    "main_0"
   ],
   "+": [
    "+",
    "main_0"
   ],
   "*": [
    "*",
    "main_0"
   ],
   ",": [
    ",",
    "main_0"
   ],
   "eps": [
    "eps",
    "main_0"
   ],
   "terminal": [
    "terminal",
    "main_0"
   ],
   "non-terminal": [
    "non-terminal",
    "main_0"
   ],
   ";": [
    ";",
    "main_0"
   ],
   "?": [
    "?",
    "main_0"
   ],
   "|": [
    "|",
    "main_0"
   ]
  },
  "main_1": {
   "A": null,
   "::=": [
    "::=",
    "main_1"
   ],
   "$": null,
   ")": [
    ")",
    "main_1"
   ],
   "(": [
    "(",
    "main_1"
   ],
   "+": [
    "+",
    "main_1"
   ],
   "*": [
    "*",
    "main_1"
   ],
   ",": [
    ",",
    "main_1"
   ],
   "eps": [
    "eps",
    "main_1"
   ],
   "terminal": [
    "terminal",
    "main_1"
   ],
   "non-terminal": [
    "non-terminal",
    "main_1"
   ],
   ";": [
    ";",
    "main_1"
   ],
   "?": [
    "?",
    "main_1"
   ],
   "|": [
    "|",
    "main_1"
   ]
  },
  "item_with_bracket_or_0": {
   "A": [
    "A",
    "item_with_bracket_or_0"
   ],
   "::=": [
    "::=",
    "item_with_bracket_or_0"
   ],
   "$": [],
   ")": [],
   "(": [
    "(",
    "item_with_bracket_or_0"
   ],
   "+": [
    "+",
    "item_with_bracket_or_0"
   ],
   "*": [
    "*",
    "item_with_bracket_or_0"
   ],
   ",": [
    ",",
    "item_with_bracket_or_0"
   ],
   "eps": [
    "eps",
    "item_with_bracket_or_0"
   ],
   "terminal": [
    "terminal",
    "item_with_bracket_or_0"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_or_0"
   ],
   ";": [
    ";",
    "item_with_bracket_or_0"
   ],
   "?": [
    "?",
    "item_with_bracket_or_0"
   ],
   "|": null
  },
  "item_with_bracket_or_1": {
   "A": [
    "A",
    "item_with_bracket_or_1"
   ],
   "::=": [
    "::=",
    "item_with_bracket_or_1"
   ],
   "$": [],
   ")": null,
   "(": [
    "(",
    "item_with_bracket_or_1"
   ],
   "+": [
    "+",
    "item_with_bracket_or_1"
   ],
   "*": [
    "*",
    "item_with_bracket_or_1"
   ],
   ",": [
    ",",
    "item_with_bracket_or_1"
   ],
   "eps": [
    "eps",
    "item_with_bracket_or_1"
   ],
   "terminal": [
    "terminal",
    "item_with_bracket_or_1"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_or_1"
   ],
   ";": [
    ";",
    "item_with_bracket_or_1"
   ],
   "?": [
    "?",
    "item_with_bracket_or_1"
   ],
   "|": null
  },
  "item_with_bracket_or_2": {
   "A": null,
   "::=": [
    "::=",
    "item_with_bracket_or_2"
   ],
   "$": [],
   ")": null,
   "(": null,
   "+": [
    "+",
    "item_with_bracket_or_2"
   ],
   "*": [
    "*",
    "item_with_bracket_or_2"
   ],
   ",": [
    ",",
    "item_with_bracket_or_2"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_with_bracket_or_2"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_or_2"
   ],
   ";": [
    ";",
    "item_with_bracket_or_2"
   ],
   "?": [
    "?",
    "item_with_bracket_or_2"
   ],
   "|": null
  },
  "item_with_bracket_or_3": {
   "A": null,
   "::=": [
    "::=",
    "item_with_bracket_or_3"
   ],
   "$": [],
   ")": null,
   "(": null,
   "+": [
    "+",
    "item_with_bracket_or_3"
   ],
   "*": [
    "*",
    "item_with_bracket_or_3"
   ],
   ",": [
    ",",
    "item_with_bracket_or_3"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_with_bracket_or_3"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_or_3"
   ],
   ";": [
    ";",
    "item_with_bracket_or_3"
   ],
   "?": [
    "?",
    "item_with_bracket_or_3"
   ],
   "|": null
  },
  "item_6": {
   "A": [],
   "::=": [
    "::=",
    "item_6"
   ],
   "$": [],
   ")": [],
   "(": [],
   "+": null,
   "*": null,
   ",": [
    ",",
    "item_6"
   ],
   "eps": [],
   "terminal": [
    "terminal",
    "item_6"
   ],
   "non-terminal": [
    "non-terminal",
    "item_6"
   ],
   ";": [],
   "?": null,
   "|": []
  },
  "item_4": {
   "A": null,
   "::=": [
    "::=",
    "item_4"
   ],
   "$": [],
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": [
    ",",
    "item_4"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_4"
   ],
   "non-terminal": [
    "non-terminal",
    "item_4"
   ],
   ";": null,
   "?": null,
   "|": null
  },
  "item_5": {
   "A": [],
   "::=": [
    "::=",
    "item_5"
   ],
   "$": [],
   ")": [],
   "(": [],
   "+": null,
   "*": null,
   ",": [
    ",",
    "item_5"
   ],
   "eps": [],
   "terminal": [
    "terminal",
    "item_5"
   ],
   "non-terminal": [
    "non-terminal",
    "item_5"
   ],
   ";": [],
   "?": null,
   "|": []
  },
  "item_2": {
   "A": null,
   "::=": [
    "::=",
    "item_2"
   ],
   "$": [],
   ")": [],
   "(": [],
   "+": [],
   "*": [],
   ",": [
    ",",
    "item_2"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_2"
   ],
   "non-terminal": [
    "non-terminal",
    "item_2"
   ],
   ";": [],
   "?": [],
   "|": []
  },
  "item_3": {
   "A": null,
   "::=": [
    "::=",
    "item_3"
   ],
   "$": [],
   ")": null,
   "(": null,
   "+": null,
   "*": null,
   ",": [
    ",",
    "item_3"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_3"
   ],
   "non-terminal": [
    "non-terminal",
    "item_3"
   ],
   ";": null,
   "?": null,
   "|": null
  },
  "item_with_bracket_1": {
   "A": null,
   "::=": [
    "::=",
    "item_with_bracket_1"
   ],
   "$": [],
   ")": null,
   "(": null,
   "+": [
    "+",
    "item_with_bracket_1"
   ],
   "*": [
    "*",
    "item_with_bracket_1"
   ],
   ",": [
    ",",
    "item_with_bracket_1"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_with_bracket_1"
   ],
   "non-terminal": [
    "non-terminal",
    "item_with_bracket_1"
   ],
   ";": [
    ";",
    "item_with_bracket_1"
   ],
   "?": [
    "?",
    "item_with_bracket_1"
   ],
   "|": null
  },
  "item_1": {
   "A": null,
   "::=": [
    "::=",
    "item_1"
   ],
   "$": [],
   ")": [],
   "(": null,
   "+": [
    "+",
    "item_1"
   ],
   "*": [
    "*",
    "item_1"
   ],
   ",": [
    ",",
    "item_1"
   ],
   "eps": null,
   "terminal": [
    "terminal",
    "item_1"
   ],
   "non-terminal": [
    "non-terminal",
    "item_1"
   ],
   ";": [],
   "?": [
    "?",
    "item_1"
   ],
   "|": []
  },
  "<non-terminal>": {
   "non-terminal": null,
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<terminal>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": null,
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<A>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": null,
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<,>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": null,
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<;>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": null,
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<::=>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": null,
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<eps>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": null,
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<(>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": null,
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<)>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": null,
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<|>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": null,
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<*>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": null,
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": []
  },
  "<+>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": null,
   "?": [
    "?"
   ],
   "$": []
  },
  "<?>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": null,
   "$": []
  },
  "<$>": {
   "non-terminal": [
    "non-terminal"
   ],
   "terminal": [
    "terminal"
   ],
   "A": [
    "A"
   ],
   ",": [
    ","
   ],
   ";": [
    ";"
   ],
   "::=": [
    "::="
   ],
   "eps": [
    "eps"
   ],
   "(": [
    "("
   ],
   ")": [
    ")"
   ],
   "|": [
    "|"
   ],
   "*": [
    "*"
   ],
   "+": [
    "+"
   ],
   "?": [
    "?"
   ],
   "$": null
  }
 }
}
Создание графа конфигураций...
---------------
 CURRENT NODE: CONFIGURATION (0): [sample_0] from []

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];

}
[ 'sample_0' ] 'non-terminal'
[ 'main_0', 'header_0' ] 'non-terminal'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>',
  '<non-terminal>' ] 'non-terminal'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ '<A>',
  'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: <A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ]
>   COMPARE:  [ '<A>',
  'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ] [ 'sample_0' ] 0
>   COMPARE:  [ '<A>',
  'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

[ 'sample_0' ] 'terminal'
[ 'sample_0', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: terminal
[ 'sample_0' ] 'A'
[ 'sample_0', 'A' ] 'A'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL A: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: A
[ 'sample_0' ] ','
[ 'sample_0', ',' ] ','
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: ,
[ 'sample_0' ] ';'
[ 'sample_0', ';' ] ';'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: ;
[ 'sample_0' ] '::='
[ 'sample_0', '::=' ] '::='
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: ::=
[ 'sample_0' ] 'eps'
[ 'sample_0', 'eps' ] 'eps'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: eps
[ 'sample_0' ] '('
[ 'sample_0', '(' ] '('
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: (
[ 'sample_0' ] ')'
[ 'sample_0', ')' ] ')'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: )
[ 'sample_0' ] '|'
[ 'sample_0', '|' ] '|'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL |: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: |
[ 'sample_0' ] '*'
[ 'sample_0', '*' ] '*'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: *
[ 'sample_0' ] '+'
[ 'sample_0', '+' ] '+'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: +
[ 'sample_0' ] '?'
[ 'sample_0', '?' ] '?'
IS FINAL NODE:  [ 'sample_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: sample_0
=> ERROR: true
-- CREATED CYCLE: sample_0
-- FROM: CONFIGURATION (0): [sample_0] from []

-- TO: CONFIGURATION (0): [sample_0] from []

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
}
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] 'non-terminal'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ]
>   COMPARE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] 'terminal'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: terminal
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] 'A'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'A' ] 'A'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL A: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: false
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: A
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] ','
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  ',' ] ','
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ,
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] ';'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  ';' ] ';'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ;
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] '::='
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '::=' ] '::='
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ::=
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] 'eps'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: eps
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] '('
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '(' ] '('
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: (
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] ')'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  ')' ] ')'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: )
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] '|'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '|' ] '|'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL |: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: |
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] '*'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '*' ] '*'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: *
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] '+'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '+' ] '+'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: +
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>' ] '?'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '?' ] '?'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
}
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] 'non-terminal'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: non-terminal
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] 'terminal'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: terminal
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] 'A'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'A' ] 'A'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL A: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: A
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] ','
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>',
  '<,>' ] ','
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '<A>',
  ',' ] ','
IS FINAL NODE:  [ '<A>',
  'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: <A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: false
-- CREATED CYCLE: <A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]

-- by terminal: ,
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] ';'
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>', '<;>' ] ';'
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>', ';' ] ';'
IS FINAL NODE:  [ '<terminal>', '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: <terminal>,<A>,header_2,<;>,main_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ]
>   COMPARE:  [ '<terminal>', '<A>', 'header_2', '<;>', 'main_0' ] [ 'sample_0' ] 0
>   COMPARE:  [ '<terminal>', '<A>', 'header_2', '<;>', 'main_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] '::='
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '::=' ] '::='
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ::=
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] 'eps'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: eps
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] '('
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '(' ] '('
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: (
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] ')'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  ')' ] ')'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: )
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] '|'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '|' ] '|'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL |: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: |
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] '*'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '*' ] '*'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: *
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] '+'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '+' ] '+'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: +
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1' ] '?'
[ 'main_0',
  '<;>',
  'header_2',
  '<A>',
  '<terminal>',
  '<;>',
  'header_1',
  '?' ] '?'
IS FINAL NODE:  [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_1,<;>,<terminal>,<A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
}
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] 'non-terminal'
[ 'main_0', '<;>', 'header_2', '<A>', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: <A>,header_2,<;>,main_0
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_0', '<;>', 'header_2', '<A>' ]
>   COMPARE:  [ '<A>', 'header_2', '<;>', 'main_0' ] [ 'sample_0' ] 0
>   COMPARE:  [ '<A>', 'header_2', '<;>', 'main_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] 'terminal'
[ 'main_0', '<;>', 'header_2', '<A>', 'terminal' ] 'terminal'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: <A>,header_2,<;>,main_0
=> ERROR: false
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: terminal
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] 'A'
[ 'main_0', '<;>', 'header_2', '<A>', 'A' ] 'A'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL A: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: A
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] ','
[ 'main_0', '<;>', 'header_2', '<A>', ',' ] ','
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ,
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] ';'
[ 'main_0', '<;>', 'header_2', '<A>', ';' ] ';'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ;
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] '::='
[ 'main_0', '<;>', 'header_2', '<A>', '::=' ] '::='
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ::=
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] 'eps'
[ 'main_0', '<;>', 'header_2', '<A>', 'eps' ] 'eps'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: eps
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] '('
[ 'main_0', '<;>', 'header_2', '<A>', '(' ] '('
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: (
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] ')'
[ 'main_0', '<;>', 'header_2', '<A>', ')' ] ')'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: )
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] '|'
[ 'main_0', '<;>', 'header_2', '<A>', '|' ] '|'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL |: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: |
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] '*'
[ 'main_0', '<;>', 'header_2', '<A>', '*' ] '*'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: *
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] '+'
[ 'main_0', '<;>', 'header_2', '<A>', '+' ] '+'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: +
[ 'main_0', '<;>', 'header_2', '<A>', '<terminal>' ] '?'
[ 'main_0', '<;>', 'header_2', '<A>', '?' ] '?'
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: <A>,header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
}
[ 'main_0', '<;>', 'header_2', '<A>' ] 'non-terminal'
[ 'main_0', '<;>', 'header_2', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: header_2,<;>,main_0
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_0', '<;>', 'header_2' ]
>   COMPARE:  [ 'header_2', '<;>', 'main_0' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'header_2', '<;>', 'main_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

[ 'main_0', '<;>', 'header_2', '<A>' ] 'terminal'
[ 'main_0', '<;>', 'header_2', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: terminal
[ 'main_0', '<;>', 'header_2', '<A>' ] 'A'
[ 'main_0', '<;>', 'header_2', 'A' ] 'A'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL A: header_2,<;>,main_0
=> ERROR: false
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: A
[ 'main_0', '<;>', 'header_2', '<A>' ] ','
[ 'main_0', '<;>', 'header_2', ',' ] ','
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: ,
[ 'main_0', '<;>', 'header_2', '<A>' ] ';'
[ 'main_0', '<;>', 'header_2', ';' ] ';'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: ;
[ 'main_0', '<;>', 'header_2', '<A>' ] '::='
[ 'main_0', '<;>', 'header_2', '::=' ] '::='
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: ::=
[ 'main_0', '<;>', 'header_2', '<A>' ] 'eps'
[ 'main_0', '<;>', 'header_2', 'eps' ] 'eps'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: eps
[ 'main_0', '<;>', 'header_2', '<A>' ] '('
[ 'main_0', '<;>', 'header_2', '(' ] '('
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: (
[ 'main_0', '<;>', 'header_2', '<A>' ] ')'
[ 'main_0', '<;>', 'header_2', ')' ] ')'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: )
[ 'main_0', '<;>', 'header_2', '<A>' ] '|'
[ 'main_0', '<;>', 'header_2', '|' ] '|'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL |: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: |
[ 'main_0', '<;>', 'header_2', '<A>' ] '*'
[ 'main_0', '<;>', 'header_2', '*' ] '*'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: *
[ 'main_0', '<;>', 'header_2', '<A>' ] '+'
[ 'main_0', '<;>', 'header_2', '+' ] '+'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: +
[ 'main_0', '<;>', 'header_2', '<A>' ] '?'
[ 'main_0', '<;>', 'header_2', '?' ] '?'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
}
[ 'main_0', '<;>', 'header_2' ] 'non-terminal'
[ 'main_0', '<;>', 'header_2', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: non-terminal
[ 'main_0', '<;>', 'header_2' ] 'terminal'
[ 'main_0', '<;>', 'header_2', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: terminal
[ 'main_0', '<;>', 'header_2' ] 'A'
[ 'main_0', '<;>', 'header_2', 'A' ] 'A'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL A: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: A
[ 'main_0', '<;>', 'header_2' ] ','
[ 'main_0', '<;>', 'header_2', '<A>', '<,>' ] ','
[ 'main_0', '<;>', 'header_2', '<A>', ',' ] ','
IS FINAL NODE:  [ '<A>', 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: <A>,header_2,<;>,main_0
=> ERROR: false
-- CREATED CYCLE: <A>,header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]

-- by terminal: ,
[ 'main_0', '<;>', 'header_2' ] ';'
[ 'main_0', '<;>' ] ';'
[ 'main_0', ';' ] ';'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: main_0
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_0' ]
>   COMPARE:  [ 'main_0' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

[ 'main_0', '<;>', 'header_2' ] '::='
[ 'main_0', '<;>', 'header_2', '::=' ] '::='
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: ::=
[ 'main_0', '<;>', 'header_2' ] 'eps'
[ 'main_0', '<;>', 'header_2', 'eps' ] 'eps'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: eps
[ 'main_0', '<;>', 'header_2' ] '('
[ 'main_0', '<;>', 'header_2', '(' ] '('
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: (
[ 'main_0', '<;>', 'header_2' ] ')'
[ 'main_0', '<;>', 'header_2', ')' ] ')'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: )
[ 'main_0', '<;>', 'header_2' ] '|'
[ 'main_0', '<;>', 'header_2', '|' ] '|'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL |: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: |
[ 'main_0', '<;>', 'header_2' ] '*'
[ 'main_0', '<;>', 'header_2', '*' ] '*'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: *
[ 'main_0', '<;>', 'header_2' ] '+'
[ 'main_0', '<;>', 'header_2', '+' ] '+'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: +
[ 'main_0', '<;>', 'header_2' ] '?'
[ 'main_0', '<;>', 'header_2', '?' ] '?'
IS FINAL NODE:  [ 'header_2', '<;>', 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: header_2,<;>,main_0
=> ERROR: true
-- CREATED CYCLE: header_2,<;>,main_0
-- FROM: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- TO: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
}
[ 'main_0' ] 'non-terminal'
[ 'main_0', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: non-terminal
[ 'main_0' ] 'terminal'
[ 'main_0', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: terminal
[ 'main_0' ] 'A'
[ 'main_1', 'grammar_rule_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_0', '<::=>', '<A>' ] 'A'
[ 'main_1', '<;>', 'complex_item_0', '<::=>', 'A' ] 'A'
IS FINAL NODE:  [ '<::=>', 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: <::=>,complex_item_0,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1', '<;>', 'complex_item_0', '<::=>' ]
>   COMPARE:  [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] [ 'main_0' ] 0
>   COMPARE:  [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] [ 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] [ 'sample_0' ] 0
>   COMPARE:  [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

[ 'main_0' ] ','
[ 'main_0', ',' ] ','
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: ,
[ 'main_0' ] ';'
[ 'main_0', ';' ] ';'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: ;
[ 'main_0' ] '::='
[ 'main_0', '::=' ] '::='
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: ::=
[ 'main_0' ] 'eps'
[ 'main_0', 'eps' ] 'eps'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: eps
[ 'main_0' ] '('
[ 'main_0', '(' ] '('
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL (: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: (
[ 'main_0' ] ')'
[ 'main_0', ')' ] ')'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ): main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: )
[ 'main_0' ] '|'
[ 'main_0', '|' ] '|'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL |: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: |
[ 'main_0' ] '*'
[ 'main_0', '*' ] '*'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: *
[ 'main_0' ] '+'
[ 'main_0', '+' ] '+'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: +
[ 'main_0' ] '?'
[ 'main_0', '?' ] '?'
IS FINAL NODE:  [ 'main_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: main_0
=> ERROR: true
-- CREATED CYCLE: main_0
-- FROM: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- TO: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
}
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] 'non-terminal'
[ 'main_1', '<;>', 'complex_item_0', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: complex_item_0,<;>,main_1
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_1', '<;>', 'complex_item_0' ]
>   COMPARE:  [ 'complex_item_0', '<;>', 'main_1' ] [ 'main_0' ] 0
>   COMPARE:  [ 'complex_item_0', '<;>', 'main_1' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'complex_item_0', '<;>', 'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] 'terminal'
[ 'main_1', '<;>', 'complex_item_0', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] 'A'
[ 'main_1', '<;>', 'complex_item_0', 'A' ] 'A'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: A
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] ','
[ 'main_1', '<;>', 'complex_item_0', ',' ] ','
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] ';'
[ 'main_1', '<;>', 'complex_item_0', ';' ] ';'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] '::='
[ 'main_1', '<;>', 'complex_item_0', '::=' ] '::='
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: complex_item_0,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] 'eps'
[ 'main_1', '<;>', 'complex_item_0', 'eps' ] 'eps'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] '('
[ 'main_1', '<;>', 'complex_item_0', '(' ] '('
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: (
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] ')'
[ 'main_1', '<;>', 'complex_item_0', ')' ] ')'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ): complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: )
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] '|'
[ 'main_1', '<;>', 'complex_item_0', '|' ] '|'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL |: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: |
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] '*'
[ 'main_1', '<;>', 'complex_item_0', '*' ] '*'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL *: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: *
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] '+'
[ 'main_1', '<;>', 'complex_item_0', '+' ] '+'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL +: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: +
[ 'main_1', '<;>', 'complex_item_0', '<::=>' ] '?'
[ 'main_1', '<;>', 'complex_item_0', '?' ] '?'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
}
[ 'main_1', '<;>', 'complex_item_0' ] 'non-terminal'
[ 'main_1', '<;>', 'complex_item_0', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1', '<;>', 'complex_item_0' ] 'terminal'
[ 'main_1', '<;>', 'complex_item_0', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ]
>   COMPARE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] [ 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] [ 'main_0' ] 0
>   COMPARE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] [ 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] [ '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_0' ] ','
[ 'main_1', '<;>', 'complex_item_0', ',' ] ','
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_0' ] ';'
[ 'main_1', '<;>' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_1' ]
>   COMPARE:  [ 'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_0' ] '::='
[ 'main_1', '<;>', 'complex_item_0', '::=' ] '::='
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<terminal>', '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_0' ] ')'
[ 'main_1', '<;>', 'complex_item_0', ')' ] ')'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ): complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: )
[ 'main_1', '<;>', 'complex_item_0' ] '|'
[ 'main_1', '<;>', 'complex_item_0', '|' ] '|'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL |: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: |
[ 'main_1', '<;>', 'complex_item_0' ] '*'
[ 'main_1', '<;>', 'complex_item_0', '*' ] '*'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL *: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: *
[ 'main_1', '<;>', 'complex_item_0' ] '+'
[ 'main_1', '<;>', 'complex_item_0', '+' ] '+'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL +: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: +
[ 'main_1', '<;>', 'complex_item_0' ] '?'
[ 'main_1', '<;>', 'complex_item_0', '?' ] '?'
IS FINAL NODE:  [ 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: complex_item_0,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
11 [label="11 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 11 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
}
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'main_0' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<terminal>', '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (12): [item_3, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ','
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ,
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ';'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1' ] ';'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1' ]
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'main_0' ] 0
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<terminal>', '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (13): [item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '::='
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ::=
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (12): [item_3, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] 4
>   suffix length:  4 4
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
# REMOVE CONFIGURATION:  CONFIGURATION (11): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]
transitions:
-- by "non-terminal" to (11) (error, not visited)
-- by "terminal" to (11) (error, not visited)
-- by "A" to (12) (normal, not visited)
-- by "," to (11) (error, not visited)
-- by ";" to (13) (error, not visited)
-- by "::=" to (11) (error, not visited)
-- by "eps" to (12) (normal, not visited)
remove config:  11
remove transition by  A CONFIGURATION (12): [item_3, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

remove config:  12
remove transition by  ; CONFIGURATION (13): [item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

remove config:  13
ADD NEW UPPER CONFIG:  CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:

ADD NEW LOWER CONFIG:  CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:

---------------
 CURRENT NODE: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
}
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] 'terminal'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: A
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] ','
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', ',' ] ','
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] ';'
[ 'main_1', '<;>', 'complex_item_2' ] ';'
[ 'main_1', '<;>' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: false
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '::='
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', '::=' ] '::='
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', ')' ] ')'
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ): complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: )
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '|'
[ 'main_1', '<;>', 'complex_item_2' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '<|>' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ]
>   COMPARE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '*'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', '*' ] '*'
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL *: complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: *
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '+'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', '+' ] '+'
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL +: complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: +
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '?'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', '?' ] '?'
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
18 [label="18 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 18 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
}
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ]
>   COMPARE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (19): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [item_0, complex_item_3, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] ','
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] ';'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ';'
[ 'main_1', '<;>', 'complex_item_2' ] ';'
[ 'main_1', '<;>' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '::='
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (19): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [item_0, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,complex_item_3,complex_item_2,<;>,main_1 => item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
# REMOVE CONFIGURATION:  CONFIGURATION (18): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (18) (error, not visited)
-- by "terminal" to (18) (error, not visited)
-- by "A" to (19) (normal, not visited)
-- by "," to (18) (error, not visited)
-- by ";" to (10) (error, not visited)
-- by "::=" to (18) (error, not visited)
-- by "eps" to (19) (normal, not visited)
remove config:  18
remove transition by  A CONFIGURATION (19): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [item_0, complex_item_3, complex_item_2, <;>, main_1]

remove config:  19
ADD NEW UPPER CONFIG:  CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:

ADD NEW LOWER CONFIG:  CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:

---------------
 CURRENT NODE: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
}
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] 'terminal'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ]
>   COMPARE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ','
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', ',' ] ','
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ';'
[ 'main_1', '<;>', 'complex_item_2' ] ';'
[ 'main_1', '<;>' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: false
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '::='
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', '::=' ] '::='
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', ')' ] ')'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ): complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: )
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '|'
[ 'main_1', '<;>', 'complex_item_2' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '<|>' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ]
>   COMPARE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '*'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', '*' ] '*'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL *: complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: *
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '+'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', '+' ] '+'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL +: complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: +
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '?'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', '?' ] '?'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
23 [label="23 - [item_3,complex_item_3,complex_item_2,<;>,main_1]"];
24 [label="24 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 23 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 23 [ label = "eps", color = "black" ];
22 -> 24 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
}
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: A
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] ','
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] ';'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ';'
[ 'main_1', '<;>', 'complex_item_2' ] ';'
[ 'main_1', '<;>' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '::='
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: (
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', ')' ] ')'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ): complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: )
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '|'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '|'
[ 'main_1', '<;>', 'complex_item_2' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '<|>' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: |
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '*'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '*' ] '*'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: *
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '+'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '+' ] '+'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: +
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '?'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '?' ] '?'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
23 [label="23 - [item_3,complex_item_3,complex_item_2,<;>,main_1]"];
24 [label="24 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 23 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 23 [ label = "eps", color = "black" ];
22 -> 24 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 23 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 23 [ label = "eps", color = "black" ];
25 -> 24 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
}
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (26): [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ','
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ';'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1' ] ';'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1' ]
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (27): [item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '::='
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (26): [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] 4
>   suffix length:  4 4
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
# REMOVE CONFIGURATION:  CONFIGURATION (24): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (24) (error, not visited)
-- by "terminal" to (24) (error, not visited)
-- by "A" to (26) (normal, not visited)
-- by "," to (24) (error, not visited)
-- by ";" to (27) (error, not visited)
-- by "::=" to (24) (error, not visited)
-- by "eps" to (26) (normal, not visited)
remove config:  24
remove transition by  A CONFIGURATION (26): [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

remove config:  26
remove transition by  ; CONFIGURATION (27): [item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

remove config:  27
---------------
 CURRENT NODE: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
23 [label="23 - [item_3,complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 23 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 23 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 23 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 23 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
}
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: A
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] ','
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  ',' ] ','
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] ';'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ';'
[ 'main_1', '<;>', 'complex_item_2' ] ';'
[ 'main_1', '<;>' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: false
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] '::='
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (29): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_3, complex_item_3, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', ')' ] ')'
IS FINAL NODE:  [ 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ): complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: )
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] '|'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3' ] '|'
[ 'main_1', '<;>', 'complex_item_2' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '<|>' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: |
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] '*'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_5' ] '*'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<*>' ] '*'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '*' ] '*'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: *
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] '+'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_5' ] '+'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<+>' ] '+'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '+' ] '+'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: +
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_3', 'item_3' ] '?'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  'item_5' ] '?'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '<?>' ] '?'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_3',
  '?' ] '?'
IS FINAL NODE:  [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_3,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (29): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_3, complex_item_3, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
23 [label="23 - [item_3,complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
29 [label="29 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 23 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 23 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
23 -> 23 [ label = "non-terminal", color = "red", style = dashed ];
23 -> 23 [ label = "terminal", color = "red", style = dashed ];
23 -> 23 [ label = "A", color = "black" ];
23 -> 23 [ label = ",", color = "red", style = dashed ];
23 -> 10 [ label = ";", color = "black" ];
23 -> 23 [ label = "::=", color = "red", style = dashed ];
23 -> 23 [ label = "eps", color = "black" ];
23 -> 29 [ label = "(", color = "black" ];
23 -> 22 [ label = ")", color = "red", style = dashed ];
23 -> 25 [ label = "|", color = "black" ];
23 -> 23 [ label = "*", color = "black" ];
23 -> 23 [ label = "+", color = "black" ];
23 -> 23 [ label = "?", color = "black" ];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 23 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 23 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
}
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (29): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_3, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (29): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_3, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (29): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_3, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (29): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_3, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_3',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_3', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_3,complex_item_3,complex_item_2,<;>,main_1 => item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1
# REMOVE CONFIGURATION:  CONFIGURATION (23): [item_3, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (23) (error, not visited)
-- by "terminal" to (23) (error, not visited)
-- by "A" to (23) (normal, not visited)
-- by "," to (23) (error, not visited)
-- by ";" to (10) (normal, not visited)
-- by "::=" to (23) (error, not visited)
-- by "eps" to (23) (normal, not visited)
-- by "(" to (29) (normal, not visited)
-- by ")" to (22) (error, not visited)
-- by "|" to (25) (normal, not visited)
-- by "*" to (23) (normal, not visited)
-- by "+" to (23) (normal, not visited)
-- by "?" to (23) (normal, not visited)
remove config:  23
remove transition by  ( CONFIGURATION (29): [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1] from [item_3, complex_item_3, complex_item_2, <;>, main_1]

remove config:  29
ADD NEW UPPER CONFIG:  CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:

---------------
 CURRENT NODE: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
31 [label="31 - [item_3]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
}
[ 'item_3' ] 'non-terminal'
[ 'item_3', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL non-terminal: item_3
=> ERROR: true
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'item_3' ] 'terminal'
[ 'item_3', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL terminal: item_3
=> ERROR: true
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'item_3' ] 'A'
[ 'item_3' ] ','
[ 'item_3', ',' ] ','
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL ,: item_3
=> ERROR: true
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'item_3' ] ';'
[ 'item_3' ] '::='
[ 'item_3', '::=' ] '::='
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL ::=: item_3
=> ERROR: true
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'item_3' ] 'eps'
[ 'item_3' ] '('
[ 'item_3' ] ')'
[ 'item_3' ] '|'
[ 'item_3' ] '*'
[ 'item_3', 'item_5' ] '*'
[ 'item_3', '<*>' ] '*'
[ 'item_3', '*' ] '*'
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL *: item_3
=> ERROR: false
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: *
[ 'item_3' ] '+'
[ 'item_3', 'item_5' ] '+'
[ 'item_3', '<+>' ] '+'
[ 'item_3', '+' ] '+'
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL +: item_3
=> ERROR: false
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: +
[ 'item_3' ] '?'
[ 'item_3', 'item_5' ] '?'
[ 'item_3', '<?>' ] '?'
[ 'item_3', '?' ] '?'
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL ?: item_3
=> ERROR: false
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
}
[ 'item_0' ] 'non-terminal'
[ 'item_0', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0
=> ERROR: true
-- CREATED CYCLE: item_0
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'item_0' ] 'terminal'
[ 'item_0', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0
=> ERROR: true
-- CREATED CYCLE: item_0
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'item_0' ] 'A'
[ 'item_1' ] 'A'
[ 'item_3', 'item_2' ] 'A'
[ 'item_3', '<A>' ] 'A'
[ 'item_3', 'A' ] 'A'
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL A: item_3
=> ERROR: false
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: A
[ 'item_0' ] ','
[ 'item_0', ',' ] ','
IS FINAL NODE:  [ 'item_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0
=> ERROR: true
-- CREATED CYCLE: item_0
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'item_0' ] ';'
[ 'item_0' ] '::='
[ 'item_0', '::=' ] '::='
IS FINAL NODE:  [ 'item_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0
=> ERROR: true
-- CREATED CYCLE: item_0
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'item_0' ] 'eps'
[ 'item_1' ] 'eps'
[ 'item_3', 'item_2' ] 'eps'
[ 'item_3', '<eps>' ] 'eps'
[ 'item_3', 'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3' ]
     res: true
=> CURRENT STACK BY TERMINAL eps: item_3
=> ERROR: false
-- CREATED CYCLE: item_3
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'item_0' ] '('
[ 'item_1' ] '('
[ 'item_4', 'item_with_bracket_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', '<(>' ] '('
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', '(' ] '('
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: (
[ 'item_0' ] ')'
[ 'item_0' ] '|'
[ 'item_0' ] '*'
[ 'item_0', '*' ] '*'
IS FINAL NODE:  [ 'item_0' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_0
=> ERROR: true
-- CREATED CYCLE: item_0
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: *
[ 'item_0' ] '+'
[ 'item_0', '+' ] '+'
IS FINAL NODE:  [ 'item_0' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_0
=> ERROR: true
-- CREATED CYCLE: item_0
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: +
[ 'item_0' ] '?'
[ 'item_0', '?' ] '?'
IS FINAL NODE:  [ 'item_0' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_0
=> ERROR: true
-- CREATED CYCLE: item_0
-- FROM: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
17 [label="17 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 17 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
}
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (32): [item_3, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ','
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ';'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1' ] ';'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1' ]
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (33): [item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '::='
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (32): [item_3, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: eps
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] 4
>   suffix length:  4 4
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
# REMOVE CONFIGURATION:  CONFIGURATION (17): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (17) (error, not visited)
-- by "terminal" to (17) (error, not visited)
-- by "A" to (32) (normal, not visited)
-- by "," to (17) (error, not visited)
-- by ";" to (33) (error, not visited)
-- by "::=" to (17) (error, not visited)
-- by "eps" to (32) (normal, not visited)
remove config:  17
remove transition by  A CONFIGURATION (32): [item_3, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

remove config:  32
remove transition by  ; CONFIGURATION (33): [item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

remove config:  33
---------------
 CURRENT NODE: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
}
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] 'terminal'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_1' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'item_2' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '<A>' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ]
true
ADD NEW CONFIGURATION:  CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] ','
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', ',' ] ','
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ,
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_1' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_1', ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4', '<)>', 'item_with_bracket_1' ]
true
ADD NEW CONFIGURATION:  CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] '::='
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', '::=' ] '::='
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ::=
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_1' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'item_2' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '<eps>' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: eps
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 4
true
CREATED LET-NODE FOR A => A|B: item_0,item_with_bracket_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4
-- equal conf found
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_1' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4' ]
true
ADD NEW CONFIGURATION:  CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_1' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_0' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 1
>   suffix length:  2 1
true
ADD NEW CONFIGURATION:  CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', '*' ] '*'
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: *
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', '+' ] '+'
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: +
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_0', '?' ] '?'
IS FINAL NODE:  [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_0,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
39 [label="39 - [item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 39 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (40): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ]
true
ADD NEW CONFIGURATION:  CONFIGURATION (41): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (40): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (39): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (39) (error, not visited)
-- by "terminal" to (39) (error, not visited)
-- by "A" to (40) (normal, not visited)
-- by "," to (39) (error, not visited)
-- by ";" to (41) (error, not visited)
-- by "::=" to (39) (error, not visited)
-- by "eps" to (40) (normal, not visited)
remove config:  39
remove transition by  A CONFIGURATION (40): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

remove config:  40
remove transition by  ; CONFIGURATION (41): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

remove config:  41
ADD NEW LOWER CONFIG:  CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]
transitions:

---------------
 CURRENT NODE: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  ',' ] ','
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ;
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  '*' ] '*'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: *
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  '+' ] '+'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: +
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  '?' ] '?'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
45 [label="45 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
46 [label="46 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 45 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 46 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (47): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ]
true
ADD NEW CONFIGURATION:  CONFIGURATION (48): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (47): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (46): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (46) (error, not visited)
-- by "terminal" to (46) (error, not visited)
-- by "A" to (47) (normal, not visited)
-- by "," to (46) (error, not visited)
-- by ";" to (48) (error, not visited)
-- by "::=" to (46) (error, not visited)
-- by "eps" to (47) (normal, not visited)
remove config:  46
remove transition by  A CONFIGURATION (47): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

remove config:  47
remove transition by  ; CONFIGURATION (48): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

remove config:  48
ADD NEW LOWER CONFIG:  CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]
transitions:

---------------
 CURRENT NODE: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
45 [label="45 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 45 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  ',' ] ','
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ;
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  '*' ] '*'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: *
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  '+' ] '+'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: +
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  '?' ] '?'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
45 [label="45 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
51 [label="51 - [item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
52 [label="52 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 45 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 51 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 51 [ label = "eps", color = "black" ];
50 -> 52 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: A
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ;
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: (
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] ')'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: true
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: |
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '*' ] '*'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: *
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '+' ] '+'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: +
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '?' ] '?'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
45 [label="45 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
51 [label="51 - [item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
52 [label="52 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 45 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 51 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 51 [ label = "eps", color = "black" ];
50 -> 52 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 51 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 51 [ label = "eps", color = "black" ];
53 -> 52 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (54): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1' ]
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (55): [item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (54): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 4
>   suffix length:  4 4
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (52): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (52) (error, not visited)
-- by "terminal" to (52) (error, not visited)
-- by "A" to (54) (normal, not visited)
-- by "," to (52) (error, not visited)
-- by ";" to (55) (error, not visited)
-- by "::=" to (52) (error, not visited)
-- by "eps" to (54) (normal, not visited)
remove config:  52
remove transition by  A CONFIGURATION (54): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

remove config:  54
remove transition by  ; CONFIGURATION (55): [item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

remove config:  55
---------------
 CURRENT NODE: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
45 [label="45 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
51 [label="51 - [item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 45 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 51 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 51 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 51 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 51 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: A
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  ',' ] ','
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ;
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (57): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] ')'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: |
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_5' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<*>' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '*' ] '*'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: *
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_5' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<+>' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '+' ] '+'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: +
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  'item_5' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '<?>' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_3',
  '?' ] '?'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (57): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
45 [label="45 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
51 [label="51 - [item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
57 [label="57 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 45 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 51 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 51 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
51 -> 51 [ label = "non-terminal", color = "red", style = dashed ];
51 -> 51 [ label = "terminal", color = "red", style = dashed ];
51 -> 51 [ label = "A", color = "black" ];
51 -> 51 [ label = ",", color = "red", style = dashed ];
51 -> 50 [ label = ";", color = "red", style = dashed ];
51 -> 51 [ label = "::=", color = "red", style = dashed ];
51 -> 51 [ label = "eps", color = "black" ];
51 -> 57 [ label = "(", color = "black" ];
51 -> 38 [ label = ")", color = "black" ];
51 -> 53 [ label = "|", color = "black" ];
51 -> 51 [ label = "*", color = "black" ];
51 -> 51 [ label = "+", color = "black" ];
51 -> 51 [ label = "?", color = "black" ];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 51 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 51 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (57): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (57): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (57): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (57): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_3',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_3,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4 => item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (51): [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (51) (error, not visited)
-- by "terminal" to (51) (error, not visited)
-- by "A" to (51) (normal, not visited)
-- by "," to (51) (error, not visited)
-- by ";" to (50) (error, not visited)
-- by "::=" to (51) (error, not visited)
-- by "eps" to (51) (normal, not visited)
-- by "(" to (57) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (53) (normal, not visited)
-- by "*" to (51) (normal, not visited)
-- by "+" to (51) (normal, not visited)
-- by "?" to (51) (normal, not visited)
remove config:  51
remove transition by  ( CONFIGURATION (57): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

remove config:  57
---------------
 CURRENT NODE: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
45 [label="45 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 45 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (59): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1' ]
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (60): [item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (59): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 4
>   suffix length:  4 4
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (45): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (45) (error, not visited)
-- by "terminal" to (45) (error, not visited)
-- by "A" to (59) (normal, not visited)
-- by "," to (45) (error, not visited)
-- by ";" to (60) (error, not visited)
-- by "::=" to (45) (error, not visited)
-- by "eps" to (59) (normal, not visited)
remove config:  45
remove transition by  A CONFIGURATION (59): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

remove config:  59
remove transition by  ; CONFIGURATION (60): [item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

remove config:  60
---------------
 CURRENT NODE: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: A
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  ',' ] ','
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ;
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (62): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] ')'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_1' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_3',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

-- by terminal: |
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_5' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<*>' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '*' ] '*'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: *
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_5' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<+>' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '+' ] '+'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: +
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_5' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<?>' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '?' ] '?'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (62): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
44 [label="44 - [item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
62 [label="62 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 44 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 44 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
44 -> 44 [ label = "non-terminal", color = "red", style = dashed ];
44 -> 44 [ label = "terminal", color = "red", style = dashed ];
44 -> 44 [ label = "A", color = "black" ];
44 -> 44 [ label = ",", color = "red", style = dashed ];
44 -> 43 [ label = ";", color = "red", style = dashed ];
44 -> 44 [ label = "::=", color = "red", style = dashed ];
44 -> 44 [ label = "eps", color = "black" ];
44 -> 62 [ label = "(", color = "black" ];
44 -> 38 [ label = ")", color = "black" ];
44 -> 53 [ label = "|", color = "black" ];
44 -> 44 [ label = "*", color = "black" ];
44 -> 44 [ label = "+", color = "black" ];
44 -> 44 [ label = "?", color = "black" ];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (62): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (62): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (62): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- TO: CONFIGURATION (62): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4 => item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (44): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (44) (error, not visited)
-- by "terminal" to (44) (error, not visited)
-- by "A" to (44) (normal, not visited)
-- by "," to (44) (error, not visited)
-- by ";" to (43) (error, not visited)
-- by "::=" to (44) (error, not visited)
-- by "eps" to (44) (normal, not visited)
-- by "(" to (62) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (53) (normal, not visited)
-- by "*" to (44) (normal, not visited)
-- by "+" to (44) (normal, not visited)
-- by "?" to (44) (normal, not visited)
remove config:  44
remove transition by  ( CONFIGURATION (62): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

remove config:  62
---------------
 CURRENT NODE: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
}
[ 'item_4' ] 'non-terminal'
[ 'item_4', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL non-terminal: item_4
=> ERROR: true
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4' ] 'terminal'
[ 'item_4', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL terminal: item_4
=> ERROR: true
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4' ] 'A'
[ 'item_4' ] ','
[ 'item_4', ',' ] ','
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ,: item_4
=> ERROR: true
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ,
[ 'item_4' ] ';'
[ 'item_4' ] '::='
[ 'item_4', '::=' ] '::='
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ::=: item_4
=> ERROR: true
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4' ] 'eps'
[ 'item_4' ] '('
[ 'item_4' ] ')'
[ 'item_4' ] '|'
[ 'item_4' ] '*'
[ 'item_4', 'item_6' ] '*'
[ 'item_4', '<*>' ] '*'
[ 'item_4', '*' ] '*'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL *: item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: *
[ 'item_4' ] '+'
[ 'item_4', 'item_6' ] '+'
[ 'item_4', '<+>' ] '+'
[ 'item_4', '+' ] '+'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL +: item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: +
[ 'item_4' ] '?'
[ 'item_4', 'item_6' ] '?'
[ 'item_4', '<?>' ] '?'
[ 'item_4', '?' ] '?'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ?: item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
}
[ 'item_4', '<)>', 'item_with_bracket_1' ] 'non-terminal'
[ 'item_4', '<)>', 'item_with_bracket_1', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4', '<)>', 'item_with_bracket_1' ] 'terminal'
[ 'item_4', '<)>', 'item_with_bracket_1', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4', '<)>', 'item_with_bracket_1' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<A>' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ]
>   COMPARE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ] [ 'item_with_bracket_1', '<)>', 'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_1' ] ','
[ 'item_4', '<)>', 'item_with_bracket_1', ',' ] ','
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ,
[ 'item_4', '<)>', 'item_with_bracket_1' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_1', ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ;
[ 'item_4', '<)>', 'item_with_bracket_1' ] '::='
[ 'item_4', '<)>', 'item_with_bracket_1', '::=' ] '::='
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4', '<)>', 'item_with_bracket_1' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<eps>' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: eps
[ 'item_4', '<)>', 'item_with_bracket_1' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_1', '<)>', 'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 4
true
CREATED LET-NODE FOR A => A|B: item_0,item_with_bracket_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
ADD NEW LOWER CONFIG:  CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- created new let-node and config
-- from CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
 by (
[ 'item_4', '<)>', 'item_with_bracket_1' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4', '<)>', 'item_with_bracket_1' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_0' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_1', '<)>', 'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 1
>   suffix length:  2 1
true
ADD NEW CONFIGURATION:  CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_1' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_1', '*' ] '*'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: *
[ 'item_4', '<)>', 'item_with_bracket_1' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_1', '+' ] '+'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: +
[ 'item_4', '<)>', 'item_with_bracket_1' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_1', '?' ] '?'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
67 [label="67 - [item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 67 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_1', '<)>', 'item_4' ] 0
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (68): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ;
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (68): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (67): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (67) (error, not visited)
-- by "terminal" to (67) (error, not visited)
-- by "A" to (68) (normal, not visited)
-- by "," to (67) (error, not visited)
-- by ";" to (43) (error, not visited)
-- by "::=" to (67) (error, not visited)
-- by "eps" to (68) (normal, not visited)
remove config:  67
remove transition by  A CONFIGURATION (68): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

remove config:  68
---------------
 CURRENT NODE: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
}
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'non-terminal'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'terminal'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<A>' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: A
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ','
[ 'item_4', '<)>', 'item_with_bracket_items_1', ',' ] ','
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: ,
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_items_1', ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: ;
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '::='
[ 'item_4', '<)>', 'item_with_bracket_items_1', '::=' ] '::='
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<eps>' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: eps
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_items_1', '<)>', 'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_items_1', '|' ] '|'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: |
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_items_1', '*' ] '*'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: *
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_items_1', '+' ] '+'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: +
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_items_1', '?' ] '?'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
70 [label="70 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
66 -> 66 [ label = "non-terminal", color = "red", style = dashed ];
66 -> 66 [ label = "terminal", color = "red", style = dashed ];
66 -> 64 [ label = "A", color = "black" ];
66 -> 66 [ label = ",", color = "red", style = dashed ];
66 -> 66 [ label = ";", color = "red", style = dashed ];
66 -> 66 [ label = "::=", color = "red", style = dashed ];
66 -> 64 [ label = "eps", color = "black" ];
66 -> 70 [ label = "(", color = "black" ];
66 -> 38 [ label = ")", color = "black" ];
66 -> 66 [ label = "|", color = "red", style = dashed ];
66 -> 66 [ label = "*", color = "red", style = dashed ];
66 -> 66 [ label = "+", color = "red", style = dashed ];
66 -> 66 [ label = "?", color = "red", style = dashed ];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_items_1', '<)>', 'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (71): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1' ]
>   COMPARE:  [ 'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_items_1', '<)>', 'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (72): [item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]

-- TO: CONFIGURATION (71): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] 4
>   suffix length:  3 4
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (70): [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_items_1, <)>, item_4]
transitions:
-- by "non-terminal" to (70) (error, not visited)
-- by "terminal" to (70) (error, not visited)
-- by "A" to (71) (normal, not visited)
-- by "," to (70) (error, not visited)
-- by ";" to (72) (error, not visited)
-- by "::=" to (70) (error, not visited)
-- by "eps" to (71) (normal, not visited)
remove config:  70
remove transition by  A CONFIGURATION (71): [item_3, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

remove config:  71
remove transition by  ; CONFIGURATION (72): [item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

remove config:  72
---------------
 CURRENT NODE: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
73 [label="73 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
66 -> 66 [ label = "non-terminal", color = "red", style = dashed ];
66 -> 66 [ label = "terminal", color = "red", style = dashed ];
66 -> 64 [ label = "A", color = "black" ];
66 -> 66 [ label = ",", color = "red", style = dashed ];
66 -> 66 [ label = ";", color = "red", style = dashed ];
66 -> 66 [ label = "::=", color = "red", style = dashed ];
66 -> 64 [ label = "eps", color = "black" ];
66 -> 73 [ label = "(", color = "black" ];
66 -> 38 [ label = ")", color = "black" ];
66 -> 66 [ label = "|", color = "red", style = dashed ];
66 -> 66 [ label = "*", color = "red", style = dashed ];
66 -> 66 [ label = "+", color = "red", style = dashed ];
66 -> 66 [ label = "?", color = "red", style = dashed ];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
73 -> 15 [label="up"];
73 -> 66 [style=dotted, label="down"];
}
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<A>' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: A
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] ','
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', ',' ] ','
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: ,
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_items_1', ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: ;
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] '::='
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '::=' ] '::='
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<eps>' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: eps
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_with_bracket_1', '<)>', 'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 4
true
CREATED LET-NODE FOR A => A|B: item_0,item_with_bracket_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
-- equal conf found
-- equal let-node found
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_items_1', '|' ] '|'
IS FINAL NODE:  [ 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_with_bracket_items_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

-- by terminal: |
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] '*'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_5' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<*>' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '*' ] '*'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: *
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] '+'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_5' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<+>' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '+' ] '+'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: +
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3' ] '?'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_5' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<?>' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '?' ] '?'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
73 [label="73 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
64 -> 64 [ label = "non-terminal", color = "red", style = dashed ];
64 -> 64 [ label = "terminal", color = "red", style = dashed ];
64 -> 64 [ label = "A", color = "black" ];
64 -> 64 [ label = ",", color = "red", style = dashed ];
64 -> 66 [ label = ";", color = "red", style = dashed ];
64 -> 64 [ label = "::=", color = "red", style = dashed ];
64 -> 64 [ label = "eps", color = "black" ];
64 -> 65 [ label = "(", color = "black" ];
64 -> 38 [ label = ")", color = "black" ];
64 -> 66 [ label = "|", color = "red", style = dashed ];
64 -> 64 [ label = "*", color = "black" ];
64 -> 64 [ label = "+", color = "black" ];
64 -> 64 [ label = "?", color = "black" ];
66 -> 66 [ label = "non-terminal", color = "red", style = dashed ];
66 -> 66 [ label = "terminal", color = "red", style = dashed ];
66 -> 64 [ label = "A", color = "black" ];
66 -> 66 [ label = ",", color = "red", style = dashed ];
66 -> 66 [ label = ";", color = "red", style = dashed ];
66 -> 66 [ label = "::=", color = "red", style = dashed ];
66 -> 64 [ label = "eps", color = "black" ];
66 -> 73 [ label = "(", color = "black" ];
66 -> 38 [ label = ")", color = "black" ];
66 -> 66 [ label = "|", color = "red", style = dashed ];
66 -> 66 [ label = "*", color = "red", style = dashed ];
66 -> 66 [ label = "+", color = "red", style = dashed ];
66 -> 66 [ label = "?", color = "red", style = dashed ];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
73 -> 15 [label="up"];
73 -> 66 [style=dotted, label="down"];
}
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] 'terminal'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_1' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<A>' ] 'A'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: A
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] ','
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', ',' ] ','
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ,
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_1' ] ';'
[ 'item_4', '<)>', 'item_with_bracket_1', ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ;
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] '::='
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '::=' ] '::='
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_1' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', '<eps>' ] 'eps'
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_3', 'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_items_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_items_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]

-- by terminal: eps
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] '('
[ 'item_4', '<)>', 'item_with_bracket_1' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_0' ] '('
[ 'item_4', '<)>', 'item_with_bracket_items_1', 'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_items_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_items_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 4
true
CREATED LET-NODE FOR A => A|B: item_0,item_with_bracket_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4
-- equal conf found
-- equal let-node found
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_1' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_items_0' ] ')'
[ 'item_4', '<)>', 'item_with_bracket_items_1' ] ')'
[ 'item_4', '<)>' ] ')'
[ 'item_4', ')' ] ')'
IS FINAL NODE:  [ 'item_4' ]
     res: true
=> CURRENT STACK BY TERMINAL ): item_4
=> ERROR: false
-- CREATED CYCLE: item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: )
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_1' ] '|'
[ 'item_4', '<)>', 'item_with_bracket_or_0' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '<|>' ] '|'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 1
>   suffix length:  2 1
true
ADD NEW CONFIGURATION:  CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'item_5' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '<*>' ] '*'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '*' ] '*'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: *
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'item_5' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '<+>' ] '+'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '+' ] '+'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: +
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', 'item_5' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '<?>' ] '?'
[ 'item_4', '<)>', 'item_with_bracket_1', 'item_3', '?' ] '?'
IS FINAL NODE:  [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_3,item_with_bracket_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_1,<)>,item_4
-- FROM: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
76 [label="76 - [item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
73 [label="73 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
35 -> 35 [ label = "non-terminal", color = "red", style = dashed ];
35 -> 35 [ label = "terminal", color = "red", style = dashed ];
35 -> 64 [ label = "A", color = "black" ];
35 -> 35 [ label = ",", color = "red", style = dashed ];
35 -> 36 [ label = ";", color = "red", style = dashed ];
35 -> 35 [ label = "::=", color = "red", style = dashed ];
35 -> 64 [ label = "eps", color = "black" ];
35 -> 65 [ label = "(", color = "black" ];
35 -> 38 [ label = ")", color = "black" ];
35 -> 76 [ label = "|", color = "black" ];
35 -> 35 [ label = "*", color = "black" ];
35 -> 35 [ label = "+", color = "black" ];
35 -> 35 [ label = "?", color = "black" ];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
64 -> 64 [ label = "non-terminal", color = "red", style = dashed ];
64 -> 64 [ label = "terminal", color = "red", style = dashed ];
64 -> 64 [ label = "A", color = "black" ];
64 -> 64 [ label = ",", color = "red", style = dashed ];
64 -> 66 [ label = ";", color = "red", style = dashed ];
64 -> 64 [ label = "::=", color = "red", style = dashed ];
64 -> 64 [ label = "eps", color = "black" ];
64 -> 65 [ label = "(", color = "black" ];
64 -> 38 [ label = ")", color = "black" ];
64 -> 66 [ label = "|", color = "red", style = dashed ];
64 -> 64 [ label = "*", color = "black" ];
64 -> 64 [ label = "+", color = "black" ];
64 -> 64 [ label = "?", color = "black" ];
66 -> 66 [ label = "non-terminal", color = "red", style = dashed ];
66 -> 66 [ label = "terminal", color = "red", style = dashed ];
66 -> 64 [ label = "A", color = "black" ];
66 -> 66 [ label = ",", color = "red", style = dashed ];
66 -> 66 [ label = ";", color = "red", style = dashed ];
66 -> 66 [ label = "::=", color = "red", style = dashed ];
66 -> 64 [ label = "eps", color = "black" ];
66 -> 73 [ label = "(", color = "black" ];
66 -> 38 [ label = ")", color = "black" ];
66 -> 66 [ label = "|", color = "red", style = dashed ];
66 -> 66 [ label = "*", color = "red", style = dashed ];
66 -> 66 [ label = "+", color = "red", style = dashed ];
66 -> 66 [ label = "?", color = "red", style = dashed ];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
73 -> 15 [label="up"];
73 -> 66 [style=dotted, label="down"];
}
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'non-terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- by terminal: non-terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'terminal'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- by terminal: terminal
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<A>' ] 'A'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_3', 'item_with_bracket_1', '<)>', 'item_4' ] 1
>   suffix length:  2 1
>   COMPARE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0', 'item_with_bracket_1', '<)>', 'item_4' ] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (77): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] ','
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  ',' ] ','
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- by terminal: ,
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2' ] ';'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  ';' ] ';'
IS FINAL NODE:  [ 'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ;: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: ;
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '::='
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- by terminal: ::=
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'item_2' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  '<eps>' ] 'eps'
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
-- CREATED CYCLE: item_3,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
-- FROM: CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]

-- TO: CONFIGURATION (77): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

-- by terminal: eps
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_1' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'item_4',
  '<)>',
  'item_with_bracket_or_1',
  'item_with_bracket_or_2',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] [ 'item_0',
  'item_with_bracket_or_2',
  'item_with_bracket_or_1',
  '<)>',
  'item_4' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_0,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4 => item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4
# REMOVE CONFIGURATION:  CONFIGURATION (76): [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_3, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (76) (error, not visited)
-- by "terminal" to (76) (error, not visited)
-- by "A" to (77) (normal, not visited)
-- by "," to (76) (error, not visited)
-- by ";" to (43) (error, not visited)
-- by "::=" to (76) (error, not visited)
-- by "eps" to (77) (normal, not visited)
remove config:  76
remove transition by  A CONFIGURATION (77): [item_3, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

remove config:  77
---------------
 CURRENT NODE: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
73 [label="73 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
35 -> 35 [ label = "non-terminal", color = "red", style = dashed ];
35 -> 35 [ label = "terminal", color = "red", style = dashed ];
35 -> 64 [ label = "A", color = "black" ];
35 -> 35 [ label = ",", color = "red", style = dashed ];
35 -> 36 [ label = ";", color = "red", style = dashed ];
35 -> 35 [ label = "::=", color = "red", style = dashed ];
35 -> 64 [ label = "eps", color = "black" ];
35 -> 65 [ label = "(", color = "black" ];
35 -> 38 [ label = ")", color = "black" ];
35 -> 42 [ label = "|", color = "black" ];
35 -> 35 [ label = "*", color = "black" ];
35 -> 35 [ label = "+", color = "black" ];
35 -> 35 [ label = "?", color = "black" ];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
64 -> 64 [ label = "non-terminal", color = "red", style = dashed ];
64 -> 64 [ label = "terminal", color = "red", style = dashed ];
64 -> 64 [ label = "A", color = "black" ];
64 -> 64 [ label = ",", color = "red", style = dashed ];
64 -> 66 [ label = ";", color = "red", style = dashed ];
64 -> 64 [ label = "::=", color = "red", style = dashed ];
64 -> 64 [ label = "eps", color = "black" ];
64 -> 65 [ label = "(", color = "black" ];
64 -> 38 [ label = ")", color = "black" ];
64 -> 66 [ label = "|", color = "red", style = dashed ];
64 -> 64 [ label = "*", color = "black" ];
64 -> 64 [ label = "+", color = "black" ];
64 -> 64 [ label = "?", color = "black" ];
66 -> 66 [ label = "non-terminal", color = "red", style = dashed ];
66 -> 66 [ label = "terminal", color = "red", style = dashed ];
66 -> 64 [ label = "A", color = "black" ];
66 -> 66 [ label = ",", color = "red", style = dashed ];
66 -> 66 [ label = ";", color = "red", style = dashed ];
66 -> 66 [ label = "::=", color = "red", style = dashed ];
66 -> 64 [ label = "eps", color = "black" ];
66 -> 73 [ label = "(", color = "black" ];
66 -> 38 [ label = ")", color = "black" ];
66 -> 66 [ label = "|", color = "red", style = dashed ];
66 -> 66 [ label = "*", color = "red", style = dashed ];
66 -> 66 [ label = "+", color = "red", style = dashed ];
66 -> 66 [ label = "?", color = "red", style = dashed ];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
73 -> 15 [label="up"];
73 -> 66 [style=dotted, label="down"];
}
[ 'main_1' ] 'non-terminal'
[ 'main_1', 'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL non-terminal: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1' ] 'terminal'
[ 'main_1', 'terminal' ] 'terminal'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL terminal: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: terminal
[ 'main_1' ] 'A'
[ 'main_1', 'grammar_rule_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_0', '<::=>', '<A>' ] 'A'
[ 'main_1', '<;>', 'complex_item_0', '<::=>', 'A' ] 'A'
IS FINAL NODE:  [ '<::=>', 'complex_item_0', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: <::=>,complex_item_0,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: <::=>,complex_item_0,<;>,main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]

-- by terminal: A
[ 'main_1' ] ','
[ 'main_1', ',' ] ','
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ,: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ,
[ 'main_1' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1' ] '::='
[ 'main_1', '::=' ] '::='
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ::=: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ::=
[ 'main_1' ] 'eps'
[ 'main_1', 'eps' ] 'eps'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL eps: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: eps
[ 'main_1' ] '('
[ 'main_1', '(' ] '('
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL (: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: (
[ 'main_1' ] ')'
[ 'main_1', ')' ] ')'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ): main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: )
[ 'main_1' ] '|'
[ 'main_1', '|' ] '|'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL |: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: |
[ 'main_1' ] '*'
[ 'main_1', '*' ] '*'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL *: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: *
[ 'main_1' ] '+'
[ 'main_1', '+' ] '+'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL +: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: +
[ 'main_1' ] '?'
[ 'main_1', '?' ] '?'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ?: main_1
=> ERROR: true
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
73 [label="73 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
10 -> 10 [ label = "non-terminal", color = "red", style = dashed ];
10 -> 10 [ label = "terminal", color = "red", style = dashed ];
10 -> 7 [ label = "A", color = "black" ];
10 -> 10 [ label = ",", color = "red", style = dashed ];
10 -> 10 [ label = ";", color = "red", style = dashed ];
10 -> 10 [ label = "::=", color = "red", style = dashed ];
10 -> 10 [ label = "eps", color = "red", style = dashed ];
10 -> 10 [ label = "(", color = "red", style = dashed ];
10 -> 10 [ label = ")", color = "red", style = dashed ];
10 -> 10 [ label = "|", color = "red", style = dashed ];
10 -> 10 [ label = "*", color = "red", style = dashed ];
10 -> 10 [ label = "+", color = "red", style = dashed ];
10 -> 10 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
35 -> 35 [ label = "non-terminal", color = "red", style = dashed ];
35 -> 35 [ label = "terminal", color = "red", style = dashed ];
35 -> 64 [ label = "A", color = "black" ];
35 -> 35 [ label = ",", color = "red", style = dashed ];
35 -> 36 [ label = ";", color = "red", style = dashed ];
35 -> 35 [ label = "::=", color = "red", style = dashed ];
35 -> 64 [ label = "eps", color = "black" ];
35 -> 65 [ label = "(", color = "black" ];
35 -> 38 [ label = ")", color = "black" ];
35 -> 42 [ label = "|", color = "black" ];
35 -> 35 [ label = "*", color = "black" ];
35 -> 35 [ label = "+", color = "black" ];
35 -> 35 [ label = "?", color = "black" ];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
64 -> 64 [ label = "non-terminal", color = "red", style = dashed ];
64 -> 64 [ label = "terminal", color = "red", style = dashed ];
64 -> 64 [ label = "A", color = "black" ];
64 -> 64 [ label = ",", color = "red", style = dashed ];
64 -> 66 [ label = ";", color = "red", style = dashed ];
64 -> 64 [ label = "::=", color = "red", style = dashed ];
64 -> 64 [ label = "eps", color = "black" ];
64 -> 65 [ label = "(", color = "black" ];
64 -> 38 [ label = ")", color = "black" ];
64 -> 66 [ label = "|", color = "red", style = dashed ];
64 -> 64 [ label = "*", color = "black" ];
64 -> 64 [ label = "+", color = "black" ];
64 -> 64 [ label = "?", color = "black" ];
66 -> 66 [ label = "non-terminal", color = "red", style = dashed ];
66 -> 66 [ label = "terminal", color = "red", style = dashed ];
66 -> 64 [ label = "A", color = "black" ];
66 -> 66 [ label = ",", color = "red", style = dashed ];
66 -> 66 [ label = ";", color = "red", style = dashed ];
66 -> 66 [ label = "::=", color = "red", style = dashed ];
66 -> 64 [ label = "eps", color = "black" ];
66 -> 73 [ label = "(", color = "black" ];
66 -> 38 [ label = ")", color = "black" ];
66 -> 66 [ label = "|", color = "red", style = dashed ];
66 -> 66 [ label = "*", color = "red", style = dashed ];
66 -> 66 [ label = "+", color = "red", style = dashed ];
66 -> 66 [ label = "?", color = "red", style = dashed ];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
73 -> 15 [label="up"];
73 -> 66 [style=dotted, label="down"];
}
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: terminal
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] 'A'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: A
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] ','
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  ',' ] ','
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ,: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ,
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] ';'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] ';'
[ 'main_1', '<;>', 'complex_item_2' ] ';'
[ 'main_1', '<;>' ] ';'
[ 'main_1', ';' ] ';'
IS FINAL NODE:  [ 'main_1' ]
     res: true
=> CURRENT STACK BY TERMINAL ;: main_1
=> ERROR: false
-- CREATED CYCLE: main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ;
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] '::='
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '::=' ] '::='
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ::=: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ::=
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] 'eps'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_2' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<eps>' ] 'eps'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'eps' ] 'eps'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL eps: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: eps
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_0' ] '('
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_1' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  'item_with_bracket_0' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '<(>' ] '('
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  '(' ] '('
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL (: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ]
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<::=>', 'complex_item_0', '<;>', 'main_1' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ '<terminal>', '<A>', 'header_2', '<;>', 'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'header_1',
  '<;>',
  '<terminal>',
  '<A>',
  'header_2',
  '<;>',
  'main_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'sample_0' ] 0
>   COMPARE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [] 0
true
ADD NEW CONFIGURATION:  CONFIGURATION (79): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_3, complex_item_1, complex_item_2, <;>, main_1]

[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] ')'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', ')' ] ')'
IS FINAL NODE:  [ 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ): complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: )
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] '|'
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1' ] '|'
[ 'main_1', '<;>', 'complex_item_2' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '<|>' ] '|'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_3',
  'item_0',
  '|' ] '|'
IS FINAL NODE:  [ 'item_0', 'complex_item_3', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL |: item_0,complex_item_3,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_0,complex_item_3,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]

-- by terminal: |
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] '*'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_5' ] '*'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<*>' ] '*'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '*' ] '*'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL *: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: *
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] '+'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_5' ] '+'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<+>' ] '+'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '+' ] '+'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL +: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: +
[ 'main_1', '<;>', 'complex_item_2', 'complex_item_1', 'item_3' ] '?'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  'item_5' ] '?'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '<?>' ] '?'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_3',
  '?' ] '?'
IS FINAL NODE:  [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL ?: item_3,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
-- CREATED CYCLE: item_3,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- TO: CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]

-- by terminal: ?
---------------
 CURRENT NODE: CONFIGURATION (79): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_3, complex_item_1, complex_item_2, <;>, main_1]

digraph {
rankdir=LR;
size="8,5";
node [shape = circle, color = black];
0 [label="0 - [sample_0]"];
1 [label="1 - [<A>,header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
2 [label="2 - [header_1,<;>,<terminal>,<A>,header_2,<;>,main_0]"];
3 [label="3 - [<terminal>,<A>,header_2,<;>,main_0]"];
4 [label="4 - [<A>,header_2,<;>,main_0]"];
5 [label="5 - [header_2,<;>,main_0]"];
6 [label="6 - [main_0]"];
7 [label="7 - [<::=>,complex_item_0,<;>,main_1]"];
8 [label="8 - [complex_item_0,<;>,main_1]"];
9 [label="9 - [item_3,complex_item_1,complex_item_2,<;>,main_1]"];
15 [label="15 - [item_0,item_with_bracket_1,<)>,item_4]"];
16 [label="16 - [complex_item_1,complex_item_2,<;>,main_1]"];
21 [label="21 - [item_0]"];
22 [label="22 - [complex_item_3,complex_item_2,<;>,main_1]"];
25 [label="25 - [item_0,complex_item_3,complex_item_2,<;>,main_1]"];
35 [label="35 - [item_3,item_with_bracket_1,<)>,item_4]"];
36 [label="36 - [item_with_bracket_1,<)>,item_4]"];
43 [label="43 - [item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
50 [label="50 - [item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
53 [label="53 - [item_0,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
64 [label="64 - [item_3,item_with_bracket_items_1,<)>,item_4]"];
66 [label="66 - [item_with_bracket_items_1,<)>,item_4]"];
79 [label="79 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
node [shape = octagon];
14 [label="14 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1]"];
20 [label="20 - [item_0,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
28 [label="28 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
30 [label="30 - [item_3,item_with_bracket_1,<)>,item_4,complex_item_3,complex_item_2,<;>,main_1]"];
37 [label="37 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4]"];
42 [label="42 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
49 [label="49 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
56 [label="56 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
58 [label="58 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_3,item_with_bracket_or_1,<)>,item_4]"];
61 [label="61 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
63 [label="63 - [item_3,item_with_bracket_1,<)>,item_4,item_with_bracket_or_2,item_with_bracket_or_1,<)>,item_4]"];
65 [label="65 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
73 [label="73 - [item_0,item_with_bracket_1,<)>,item_4,item_with_bracket_1,<)>,item_4,item_with_bracket_items_1,<)>,item_4]"];
node [shape = doublecircle];
10 [label="10 - [main_1]"];
31 [label="31 - [item_3]"];
38 [label="38 - [item_4]"];
0 -> 1 [ label = "non-terminal", color = "black" ];
0 -> 0 [ label = "terminal", color = "red", style = dashed ];
0 -> 0 [ label = "A", color = "red", style = dashed ];
0 -> 0 [ label = ",", color = "red", style = dashed ];
0 -> 0 [ label = ";", color = "red", style = dashed ];
0 -> 0 [ label = "::=", color = "red", style = dashed ];
0 -> 0 [ label = "eps", color = "red", style = dashed ];
0 -> 0 [ label = "(", color = "red", style = dashed ];
0 -> 0 [ label = ")", color = "red", style = dashed ];
0 -> 0 [ label = "|", color = "red", style = dashed ];
0 -> 0 [ label = "*", color = "red", style = dashed ];
0 -> 0 [ label = "+", color = "red", style = dashed ];
0 -> 0 [ label = "?", color = "red", style = dashed ];
1 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
1 -> 2 [ label = "terminal", color = "red", style = dashed ];
1 -> 2 [ label = "A", color = "black" ];
1 -> 2 [ label = ",", color = "red", style = dashed ];
1 -> 2 [ label = ";", color = "red", style = dashed ];
1 -> 2 [ label = "::=", color = "red", style = dashed ];
1 -> 2 [ label = "eps", color = "red", style = dashed ];
1 -> 2 [ label = "(", color = "red", style = dashed ];
1 -> 2 [ label = ")", color = "red", style = dashed ];
1 -> 2 [ label = "|", color = "red", style = dashed ];
1 -> 2 [ label = "*", color = "red", style = dashed ];
1 -> 2 [ label = "+", color = "red", style = dashed ];
1 -> 2 [ label = "?", color = "red", style = dashed ];
2 -> 2 [ label = "non-terminal", color = "red", style = dashed ];
2 -> 2 [ label = "terminal", color = "red", style = dashed ];
2 -> 2 [ label = "A", color = "red", style = dashed ];
2 -> 1 [ label = ",", color = "black" ];
2 -> 3 [ label = ";", color = "black" ];
2 -> 2 [ label = "::=", color = "red", style = dashed ];
2 -> 2 [ label = "eps", color = "red", style = dashed ];
2 -> 2 [ label = "(", color = "red", style = dashed ];
2 -> 2 [ label = ")", color = "red", style = dashed ];
2 -> 2 [ label = "|", color = "red", style = dashed ];
2 -> 2 [ label = "*", color = "red", style = dashed ];
2 -> 2 [ label = "+", color = "red", style = dashed ];
2 -> 2 [ label = "?", color = "red", style = dashed ];
3 -> 4 [ label = "non-terminal", color = "red", style = dashed ];
3 -> 4 [ label = "terminal", color = "black" ];
3 -> 4 [ label = "A", color = "red", style = dashed ];
3 -> 4 [ label = ",", color = "red", style = dashed ];
3 -> 4 [ label = ";", color = "red", style = dashed ];
3 -> 4 [ label = "::=", color = "red", style = dashed ];
3 -> 4 [ label = "eps", color = "red", style = dashed ];
3 -> 4 [ label = "(", color = "red", style = dashed ];
3 -> 4 [ label = ")", color = "red", style = dashed ];
3 -> 4 [ label = "|", color = "red", style = dashed ];
3 -> 4 [ label = "*", color = "red", style = dashed ];
3 -> 4 [ label = "+", color = "red", style = dashed ];
3 -> 4 [ label = "?", color = "red", style = dashed ];
4 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
4 -> 5 [ label = "terminal", color = "red", style = dashed ];
4 -> 5 [ label = "A", color = "black" ];
4 -> 5 [ label = ",", color = "red", style = dashed ];
4 -> 5 [ label = ";", color = "red", style = dashed ];
4 -> 5 [ label = "::=", color = "red", style = dashed ];
4 -> 5 [ label = "eps", color = "red", style = dashed ];
4 -> 5 [ label = "(", color = "red", style = dashed ];
4 -> 5 [ label = ")", color = "red", style = dashed ];
4 -> 5 [ label = "|", color = "red", style = dashed ];
4 -> 5 [ label = "*", color = "red", style = dashed ];
4 -> 5 [ label = "+", color = "red", style = dashed ];
4 -> 5 [ label = "?", color = "red", style = dashed ];
5 -> 5 [ label = "non-terminal", color = "red", style = dashed ];
5 -> 5 [ label = "terminal", color = "red", style = dashed ];
5 -> 5 [ label = "A", color = "red", style = dashed ];
5 -> 4 [ label = ",", color = "black" ];
5 -> 6 [ label = ";", color = "black" ];
5 -> 5 [ label = "::=", color = "red", style = dashed ];
5 -> 5 [ label = "eps", color = "red", style = dashed ];
5 -> 5 [ label = "(", color = "red", style = dashed ];
5 -> 5 [ label = ")", color = "red", style = dashed ];
5 -> 5 [ label = "|", color = "red", style = dashed ];
5 -> 5 [ label = "*", color = "red", style = dashed ];
5 -> 5 [ label = "+", color = "red", style = dashed ];
5 -> 5 [ label = "?", color = "red", style = dashed ];
6 -> 6 [ label = "non-terminal", color = "red", style = dashed ];
6 -> 6 [ label = "terminal", color = "red", style = dashed ];
6 -> 7 [ label = "A", color = "black" ];
6 -> 6 [ label = ",", color = "red", style = dashed ];
6 -> 6 [ label = ";", color = "red", style = dashed ];
6 -> 6 [ label = "::=", color = "red", style = dashed ];
6 -> 6 [ label = "eps", color = "red", style = dashed ];
6 -> 6 [ label = "(", color = "red", style = dashed ];
6 -> 6 [ label = ")", color = "red", style = dashed ];
6 -> 6 [ label = "|", color = "red", style = dashed ];
6 -> 6 [ label = "*", color = "red", style = dashed ];
6 -> 6 [ label = "+", color = "red", style = dashed ];
6 -> 6 [ label = "?", color = "red", style = dashed ];
7 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
7 -> 8 [ label = "terminal", color = "red", style = dashed ];
7 -> 8 [ label = "A", color = "red", style = dashed ];
7 -> 8 [ label = ",", color = "red", style = dashed ];
7 -> 8 [ label = ";", color = "red", style = dashed ];
7 -> 8 [ label = "::=", color = "black" ];
7 -> 8 [ label = "eps", color = "red", style = dashed ];
7 -> 8 [ label = "(", color = "red", style = dashed ];
7 -> 8 [ label = ")", color = "red", style = dashed ];
7 -> 8 [ label = "|", color = "red", style = dashed ];
7 -> 8 [ label = "*", color = "red", style = dashed ];
7 -> 8 [ label = "+", color = "red", style = dashed ];
7 -> 8 [ label = "?", color = "red", style = dashed ];
8 -> 8 [ label = "non-terminal", color = "red", style = dashed ];
8 -> 8 [ label = "terminal", color = "red", style = dashed ];
8 -> 9 [ label = "A", color = "black" ];
8 -> 8 [ label = ",", color = "red", style = dashed ];
8 -> 10 [ label = ";", color = "red", style = dashed ];
8 -> 8 [ label = "::=", color = "red", style = dashed ];
8 -> 9 [ label = "eps", color = "black" ];
8 -> 14 [ label = "(", color = "black" ];
8 -> 8 [ label = ")", color = "red", style = dashed ];
8 -> 8 [ label = "|", color = "red", style = dashed ];
8 -> 8 [ label = "*", color = "red", style = dashed ];
8 -> 8 [ label = "+", color = "red", style = dashed ];
8 -> 8 [ label = "?", color = "red", style = dashed ];
9 -> 9 [ label = "non-terminal", color = "red", style = dashed ];
9 -> 9 [ label = "terminal", color = "red", style = dashed ];
9 -> 9 [ label = "A", color = "black" ];
9 -> 9 [ label = ",", color = "red", style = dashed ];
9 -> 10 [ label = ";", color = "black" ];
9 -> 9 [ label = "::=", color = "red", style = dashed ];
9 -> 9 [ label = "eps", color = "black" ];
9 -> 79 [ label = "(", color = "black" ];
9 -> 16 [ label = ")", color = "red", style = dashed ];
9 -> 25 [ label = "|", color = "black" ];
9 -> 9 [ label = "*", color = "black" ];
9 -> 9 [ label = "+", color = "black" ];
9 -> 9 [ label = "?", color = "black" ];
10 -> 10 [ label = "non-terminal", color = "red", style = dashed ];
10 -> 10 [ label = "terminal", color = "red", style = dashed ];
10 -> 7 [ label = "A", color = "black" ];
10 -> 10 [ label = ",", color = "red", style = dashed ];
10 -> 10 [ label = ";", color = "red", style = dashed ];
10 -> 10 [ label = "::=", color = "red", style = dashed ];
10 -> 10 [ label = "eps", color = "red", style = dashed ];
10 -> 10 [ label = "(", color = "red", style = dashed ];
10 -> 10 [ label = ")", color = "red", style = dashed ];
10 -> 10 [ label = "|", color = "red", style = dashed ];
10 -> 10 [ label = "*", color = "red", style = dashed ];
10 -> 10 [ label = "+", color = "red", style = dashed ];
10 -> 10 [ label = "?", color = "red", style = dashed ];
15 -> 15 [ label = "non-terminal", color = "red", style = dashed ];
15 -> 15 [ label = "terminal", color = "red", style = dashed ];
15 -> 35 [ label = "A", color = "black" ];
15 -> 15 [ label = ",", color = "red", style = dashed ];
15 -> 36 [ label = ";", color = "red", style = dashed ];
15 -> 15 [ label = "::=", color = "red", style = dashed ];
15 -> 35 [ label = "eps", color = "black" ];
15 -> 37 [ label = "(", color = "black" ];
15 -> 38 [ label = ")", color = "red", style = dashed ];
15 -> 42 [ label = "|", color = "red", style = dashed ];
15 -> 15 [ label = "*", color = "red", style = dashed ];
15 -> 15 [ label = "+", color = "red", style = dashed ];
15 -> 15 [ label = "?", color = "red", style = dashed ];
16 -> 16 [ label = "non-terminal", color = "red", style = dashed ];
16 -> 16 [ label = "terminal", color = "red", style = dashed ];
16 -> 9 [ label = "A", color = "black" ];
16 -> 16 [ label = ",", color = "red", style = dashed ];
16 -> 10 [ label = ";", color = "black" ];
16 -> 16 [ label = "::=", color = "red", style = dashed ];
16 -> 9 [ label = "eps", color = "black" ];
16 -> 14 [ label = "(", color = "black" ];
16 -> 16 [ label = ")", color = "red", style = dashed ];
16 -> 20 [ label = "|", color = "black" ];
16 -> 16 [ label = "*", color = "red", style = dashed ];
16 -> 16 [ label = "+", color = "red", style = dashed ];
16 -> 16 [ label = "?", color = "red", style = dashed ];
14 -> 15 [label="up"];
14 -> 16 [style=dotted, label="down"];
21 -> 21 [ label = "non-terminal", color = "red", style = dashed ];
21 -> 21 [ label = "terminal", color = "red", style = dashed ];
21 -> 31 [ label = "A", color = "black" ];
21 -> 21 [ label = ",", color = "red", style = dashed ];
21 -> 21 [ label = "::=", color = "red", style = dashed ];
21 -> 31 [ label = "eps", color = "black" ];
21 -> 15 [ label = "(", color = "black" ];
21 -> 21 [ label = "*", color = "red", style = dashed ];
21 -> 21 [ label = "+", color = "red", style = dashed ];
21 -> 21 [ label = "?", color = "red", style = dashed ];
22 -> 22 [ label = "non-terminal", color = "red", style = dashed ];
22 -> 22 [ label = "terminal", color = "red", style = dashed ];
22 -> 30 [ label = "A", color = "black" ];
22 -> 22 [ label = ",", color = "red", style = dashed ];
22 -> 10 [ label = ";", color = "black" ];
22 -> 22 [ label = "::=", color = "red", style = dashed ];
22 -> 30 [ label = "eps", color = "black" ];
22 -> 28 [ label = "(", color = "black" ];
22 -> 22 [ label = ")", color = "red", style = dashed ];
22 -> 25 [ label = "|", color = "black" ];
22 -> 22 [ label = "*", color = "red", style = dashed ];
22 -> 22 [ label = "+", color = "red", style = dashed ];
22 -> 22 [ label = "?", color = "red", style = dashed ];
20 -> 21 [label="up"];
20 -> 22 [style=dotted, label="down"];
25 -> 25 [ label = "non-terminal", color = "red", style = dashed ];
25 -> 25 [ label = "terminal", color = "red", style = dashed ];
25 -> 30 [ label = "A", color = "black" ];
25 -> 25 [ label = ",", color = "red", style = dashed ];
25 -> 10 [ label = ";", color = "red", style = dashed ];
25 -> 25 [ label = "::=", color = "red", style = dashed ];
25 -> 30 [ label = "eps", color = "black" ];
25 -> 28 [ label = "(", color = "black" ];
25 -> 22 [ label = ")", color = "red", style = dashed ];
25 -> 25 [ label = "|", color = "red", style = dashed ];
25 -> 25 [ label = "*", color = "red", style = dashed ];
25 -> 25 [ label = "+", color = "red", style = dashed ];
25 -> 25 [ label = "?", color = "red", style = dashed ];
28 -> 15 [label="up"];
28 -> 22 [style=dotted, label="down"];
31 -> 31 [ label = "non-terminal", color = "red", style = dashed ];
31 -> 31 [ label = "terminal", color = "red", style = dashed ];
31 -> 31 [ label = ",", color = "red", style = dashed ];
31 -> 31 [ label = "::=", color = "red", style = dashed ];
31 -> 31 [ label = "*", color = "black" ];
31 -> 31 [ label = "+", color = "black" ];
31 -> 31 [ label = "?", color = "black" ];
30 -> 31 [label="up"];
30 -> 22 [style=dotted, label="down"];
35 -> 35 [ label = "non-terminal", color = "red", style = dashed ];
35 -> 35 [ label = "terminal", color = "red", style = dashed ];
35 -> 64 [ label = "A", color = "black" ];
35 -> 35 [ label = ",", color = "red", style = dashed ];
35 -> 36 [ label = ";", color = "red", style = dashed ];
35 -> 35 [ label = "::=", color = "red", style = dashed ];
35 -> 64 [ label = "eps", color = "black" ];
35 -> 65 [ label = "(", color = "black" ];
35 -> 38 [ label = ")", color = "black" ];
35 -> 42 [ label = "|", color = "black" ];
35 -> 35 [ label = "*", color = "black" ];
35 -> 35 [ label = "+", color = "black" ];
35 -> 35 [ label = "?", color = "black" ];
36 -> 36 [ label = "non-terminal", color = "red", style = dashed ];
36 -> 36 [ label = "terminal", color = "red", style = dashed ];
36 -> 64 [ label = "A", color = "black" ];
36 -> 36 [ label = ",", color = "red", style = dashed ];
36 -> 36 [ label = ";", color = "red", style = dashed ];
36 -> 36 [ label = "::=", color = "red", style = dashed ];
36 -> 64 [ label = "eps", color = "black" ];
36 -> 65 [ label = "(", color = "black" ];
36 -> 38 [ label = ")", color = "black" ];
36 -> 42 [ label = "|", color = "black" ];
36 -> 36 [ label = "*", color = "red", style = dashed ];
36 -> 36 [ label = "+", color = "red", style = dashed ];
36 -> 36 [ label = "?", color = "red", style = dashed ];
37 -> 15 [label="up"];
37 -> 36 [style=dotted, label="down"];
38 -> 38 [ label = "non-terminal", color = "red", style = dashed ];
38 -> 38 [ label = "terminal", color = "red", style = dashed ];
38 -> 38 [ label = ",", color = "red", style = dashed ];
38 -> 38 [ label = "::=", color = "red", style = dashed ];
38 -> 38 [ label = "*", color = "black" ];
38 -> 38 [ label = "+", color = "black" ];
38 -> 38 [ label = "?", color = "black" ];
43 -> 43 [ label = "non-terminal", color = "red", style = dashed ];
43 -> 43 [ label = "terminal", color = "red", style = dashed ];
43 -> 63 [ label = "A", color = "black" ];
43 -> 43 [ label = ",", color = "red", style = dashed ];
43 -> 43 [ label = ";", color = "red", style = dashed ];
43 -> 43 [ label = "::=", color = "red", style = dashed ];
43 -> 63 [ label = "eps", color = "black" ];
43 -> 61 [ label = "(", color = "black" ];
43 -> 38 [ label = ")", color = "black" ];
43 -> 49 [ label = "|", color = "black" ];
43 -> 43 [ label = "*", color = "red", style = dashed ];
43 -> 43 [ label = "+", color = "red", style = dashed ];
43 -> 43 [ label = "?", color = "red", style = dashed ];
42 -> 21 [label="up"];
42 -> 43 [style=dotted, label="down"];
50 -> 50 [ label = "non-terminal", color = "red", style = dashed ];
50 -> 50 [ label = "terminal", color = "red", style = dashed ];
50 -> 58 [ label = "A", color = "black" ];
50 -> 50 [ label = ",", color = "red", style = dashed ];
50 -> 50 [ label = ";", color = "red", style = dashed ];
50 -> 50 [ label = "::=", color = "red", style = dashed ];
50 -> 58 [ label = "eps", color = "black" ];
50 -> 56 [ label = "(", color = "black" ];
50 -> 38 [ label = ")", color = "black" ];
50 -> 53 [ label = "|", color = "black" ];
50 -> 50 [ label = "*", color = "red", style = dashed ];
50 -> 50 [ label = "+", color = "red", style = dashed ];
50 -> 50 [ label = "?", color = "red", style = dashed ];
49 -> 21 [label="up"];
49 -> 50 [style=dotted, label="down"];
53 -> 53 [ label = "non-terminal", color = "red", style = dashed ];
53 -> 53 [ label = "terminal", color = "red", style = dashed ];
53 -> 58 [ label = "A", color = "black" ];
53 -> 53 [ label = ",", color = "red", style = dashed ];
53 -> 50 [ label = ";", color = "red", style = dashed ];
53 -> 53 [ label = "::=", color = "red", style = dashed ];
53 -> 58 [ label = "eps", color = "black" ];
53 -> 56 [ label = "(", color = "black" ];
53 -> 38 [ label = ")", color = "red", style = dashed ];
53 -> 53 [ label = "|", color = "red", style = dashed ];
53 -> 53 [ label = "*", color = "red", style = dashed ];
53 -> 53 [ label = "+", color = "red", style = dashed ];
53 -> 53 [ label = "?", color = "red", style = dashed ];
56 -> 15 [label="up"];
56 -> 50 [style=dotted, label="down"];
58 -> 31 [label="up"];
58 -> 50 [style=dotted, label="down"];
61 -> 15 [label="up"];
61 -> 43 [style=dotted, label="down"];
63 -> 31 [label="up"];
63 -> 43 [style=dotted, label="down"];
64 -> 64 [ label = "non-terminal", color = "red", style = dashed ];
64 -> 64 [ label = "terminal", color = "red", style = dashed ];
64 -> 64 [ label = "A", color = "black" ];
64 -> 64 [ label = ",", color = "red", style = dashed ];
64 -> 66 [ label = ";", color = "red", style = dashed ];
64 -> 64 [ label = "::=", color = "red", style = dashed ];
64 -> 64 [ label = "eps", color = "black" ];
64 -> 65 [ label = "(", color = "black" ];
64 -> 38 [ label = ")", color = "black" ];
64 -> 66 [ label = "|", color = "red", style = dashed ];
64 -> 64 [ label = "*", color = "black" ];
64 -> 64 [ label = "+", color = "black" ];
64 -> 64 [ label = "?", color = "black" ];
66 -> 66 [ label = "non-terminal", color = "red", style = dashed ];
66 -> 66 [ label = "terminal", color = "red", style = dashed ];
66 -> 64 [ label = "A", color = "black" ];
66 -> 66 [ label = ",", color = "red", style = dashed ];
66 -> 66 [ label = ";", color = "red", style = dashed ];
66 -> 66 [ label = "::=", color = "red", style = dashed ];
66 -> 64 [ label = "eps", color = "black" ];
66 -> 73 [ label = "(", color = "black" ];
66 -> 38 [ label = ")", color = "black" ];
66 -> 66 [ label = "|", color = "red", style = dashed ];
66 -> 66 [ label = "*", color = "red", style = dashed ];
66 -> 66 [ label = "+", color = "red", style = dashed ];
66 -> 66 [ label = "?", color = "red", style = dashed ];
65 -> 15 [label="up"];
65 -> 66 [style=dotted, label="down"];
73 -> 15 [label="up"];
73 -> 66 [style=dotted, label="down"];
}
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'non-terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'non-terminal' ] 'non-terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL non-terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (79): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_3, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (79): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_3, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: non-terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'terminal'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0',
  'terminal' ] 'terminal'
IS FINAL NODE:  [ 'item_0',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL terminal: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: true
-- CREATED CYCLE: item_0,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
-- FROM: CONFIGURATION (79): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_3, complex_item_1, complex_item_2, <;>, main_1]

-- TO: CONFIGURATION (79): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_3, complex_item_1, complex_item_2, <;>, main_1]

-- by terminal: terminal
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_0' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_1' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'item_2' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  '<A>' ] 'A'
[ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3',
  'A' ] 'A'
IS FINAL NODE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ]
     res: false
=> CURRENT STACK BY TERMINAL A: item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
=> ERROR: false
> CHECK TURCHIN RELATION FOR:  [ 'main_1',
  '<;>',
  'complex_item_2',
  'complex_item_1',
  'item_4',
  '<)>',
  'item_with_bracket_1',
  'item_3' ]
>   COMPARE:  [ 'item_3',
  'item_with_bracket_1',
  '<)>',
  'item_4',
  'complex_item_1',
  'complex_item_2',
  '<;>',
  'main_1' ] [ 'item_3', 'complex_item_1', 'complex_item_2', '<;>', 'main_1' ] 1
>   suffix length:  4 1
true
CREATED LET-NODE FOR A|C => A|B|C: item_3,complex_item_1,complex_item_2,<;>,main_1 => item_3,item_with_bracket_1,<)>,item_4,complex_item_1,complex_item_2,<;>,main_1
# REMOVE CONFIGURATION:  CONFIGURATION (9): [item_3, complex_item_1, complex_item_2, <;>, main_1] from [complex_item_0, <;>, main_1]
transitions:
-- by "non-terminal" to (9) (error, not visited)
-- by "terminal" to (9) (error, not visited)
-- by "A" to (9) (normal, not visited)
-- by "," to (9) (error, not visited)
-- by ";" to (10) (normal, not visited)
-- by "::=" to (9) (error, not visited)
-- by "eps" to (9) (normal, not visited)
-- by "(" to (79) (normal, not visited)
-- by ")" to (16) (error, not visited)
-- by "|" to (25) (normal, not visited)
-- by "*" to (9) (normal, not visited)
-- by "+" to (9) (normal, not visited)
-- by "?" to (9) (normal, not visited)
remove config:  9
remove transition by  ( CONFIGURATION (79): [item_0, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1] from [item_3, complex_item_1, complex_item_2, <;>, main_1]

remove config:  79
GENERATE NEGATIVE TESTS...
current stack: [ 0 ]
visit node: CONFIGURATION (0): [sample_0] from []
transitions:
-- by "non-terminal" to (1) (normal, not visited)
-- by "terminal" to (0) (error, not visited)
-- by "A" to (0) (error, not visited)
-- by "," to (0) (error, not visited)
-- by ";" to (0) (error, not visited)
-- by "::=" to (0) (error, not visited)
-- by "eps" to (0) (error, not visited)
-- by "(" to (0) (error, not visited)
-- by ")" to (0) (error, not visited)
-- by "|" to (0) (error, not visited)
-- by "*" to (0) (error, not visited)
-- by "+" to (0) (error, not visited)
-- by "?" to (0) (error, not visited)
NEW NEGATIVE TEST:  1 
NEW NEGATIVE TEST:  2 terminal
NEW NEGATIVE TEST:  3 A
NEW NEGATIVE TEST:  4 ,
NEW NEGATIVE TEST:  5 ;
NEW NEGATIVE TEST:  6 ::=
NEW NEGATIVE TEST:  7 eps
NEW NEGATIVE TEST:  8 (
NEW NEGATIVE TEST:  9 )
NEW NEGATIVE TEST:  10 |
NEW NEGATIVE TEST:  11 *
NEW NEGATIVE TEST:  12 +
NEW NEGATIVE TEST:  13 ?
current stack: [ 1 ]
visit node: CONFIGURATION (1): [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [sample_0]
transitions:
-- by "non-terminal" to (2) (error, not visited)
-- by "terminal" to (2) (error, not visited)
-- by "A" to (2) (normal, not visited)
-- by "," to (2) (error, not visited)
-- by ";" to (2) (error, not visited)
-- by "::=" to (2) (error, not visited)
-- by "eps" to (2) (error, not visited)
-- by "(" to (2) (error, not visited)
-- by ")" to (2) (error, not visited)
-- by "|" to (2) (error, not visited)
-- by "*" to (2) (error, not visited)
-- by "+" to (2) (error, not visited)
-- by "?" to (2) (error, not visited)
NEW NEGATIVE TEST:  14 non-terminal
NEW NEGATIVE TEST:  15 non-terminal non-terminal
NEW NEGATIVE TEST:  16 non-terminal terminal
NEW NEGATIVE TEST:  17 non-terminal ,
NEW NEGATIVE TEST:  18 non-terminal ;
NEW NEGATIVE TEST:  19 non-terminal ::=
NEW NEGATIVE TEST:  20 non-terminal eps
NEW NEGATIVE TEST:  21 non-terminal (
NEW NEGATIVE TEST:  22 non-terminal )
NEW NEGATIVE TEST:  23 non-terminal |
NEW NEGATIVE TEST:  24 non-terminal *
NEW NEGATIVE TEST:  25 non-terminal +
NEW NEGATIVE TEST:  26 non-terminal ?
current stack: [ 2 ]
visit node: CONFIGURATION (2): [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0] from [<A>, header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]
transitions:
-- by "non-terminal" to (2) (error, not visited)
-- by "terminal" to (2) (error, not visited)
-- by "A" to (2) (error, not visited)
-- by "," to (1) (normal, not visited)
-- by ";" to (3) (normal, not visited)
-- by "::=" to (2) (error, not visited)
-- by "eps" to (2) (error, not visited)
-- by "(" to (2) (error, not visited)
-- by ")" to (2) (error, not visited)
-- by "|" to (2) (error, not visited)
-- by "*" to (2) (error, not visited)
-- by "+" to (2) (error, not visited)
-- by "?" to (2) (error, not visited)
NEW NEGATIVE TEST:  27 non-terminal A
NEW NEGATIVE TEST:  28 non-terminal A non-terminal
NEW NEGATIVE TEST:  29 non-terminal A terminal
NEW NEGATIVE TEST:  30 non-terminal A A
NEW NEGATIVE TEST:  31 non-terminal A ::=
NEW NEGATIVE TEST:  32 non-terminal A eps
NEW NEGATIVE TEST:  33 non-terminal A (
NEW NEGATIVE TEST:  34 non-terminal A )
NEW NEGATIVE TEST:  35 non-terminal A |
NEW NEGATIVE TEST:  36 non-terminal A *
NEW NEGATIVE TEST:  37 non-terminal A +
NEW NEGATIVE TEST:  38 non-terminal A ?
current stack: [ 1 ]
stack visited or empty!:  [ 1 ]
current stack: [ 3 ]
visit node: CONFIGURATION (3): [<terminal>, <A>, header_2, <;>, main_0] from [header_1, <;>, <terminal>, <A>, header_2, <;>, main_0]
transitions:
-- by "non-terminal" to (4) (error, not visited)
-- by "terminal" to (4) (normal, not visited)
-- by "A" to (4) (error, not visited)
-- by "," to (4) (error, not visited)
-- by ";" to (4) (error, not visited)
-- by "::=" to (4) (error, not visited)
-- by "eps" to (4) (error, not visited)
-- by "(" to (4) (error, not visited)
-- by ")" to (4) (error, not visited)
-- by "|" to (4) (error, not visited)
-- by "*" to (4) (error, not visited)
-- by "+" to (4) (error, not visited)
-- by "?" to (4) (error, not visited)
NEW NEGATIVE TEST:  39 non-terminal A ;
NEW NEGATIVE TEST:  40 non-terminal A ; non-terminal
NEW NEGATIVE TEST:  41 non-terminal A ; A
NEW NEGATIVE TEST:  42 non-terminal A ; ,
NEW NEGATIVE TEST:  43 non-terminal A ; ;
NEW NEGATIVE TEST:  44 non-terminal A ; ::=
NEW NEGATIVE TEST:  45 non-terminal A ; eps
NEW NEGATIVE TEST:  46 non-terminal A ; (
NEW NEGATIVE TEST:  47 non-terminal A ; )
NEW NEGATIVE TEST:  48 non-terminal A ; |
NEW NEGATIVE TEST:  49 non-terminal A ; *
NEW NEGATIVE TEST:  50 non-terminal A ; +
NEW NEGATIVE TEST:  51 non-terminal A ; ?
current stack: [ 4 ]
visit node: CONFIGURATION (4): [<A>, header_2, <;>, main_0] from [<terminal>, <A>, header_2, <;>, main_0]
transitions:
-- by "non-terminal" to (5) (error, not visited)
-- by "terminal" to (5) (error, not visited)
-- by "A" to (5) (normal, not visited)
-- by "," to (5) (error, not visited)
-- by ";" to (5) (error, not visited)
-- by "::=" to (5) (error, not visited)
-- by "eps" to (5) (error, not visited)
-- by "(" to (5) (error, not visited)
-- by ")" to (5) (error, not visited)
-- by "|" to (5) (error, not visited)
-- by "*" to (5) (error, not visited)
-- by "+" to (5) (error, not visited)
-- by "?" to (5) (error, not visited)
NEW NEGATIVE TEST:  52 non-terminal A ; terminal
NEW NEGATIVE TEST:  53 non-terminal A ; terminal non-terminal
NEW NEGATIVE TEST:  54 non-terminal A ; terminal terminal
NEW NEGATIVE TEST:  55 non-terminal A ; terminal ,
NEW NEGATIVE TEST:  56 non-terminal A ; terminal ;
NEW NEGATIVE TEST:  57 non-terminal A ; terminal ::=
NEW NEGATIVE TEST:  58 non-terminal A ; terminal eps
NEW NEGATIVE TEST:  59 non-terminal A ; terminal (
NEW NEGATIVE TEST:  60 non-terminal A ; terminal )
NEW NEGATIVE TEST:  61 non-terminal A ; terminal |
NEW NEGATIVE TEST:  62 non-terminal A ; terminal *
NEW NEGATIVE TEST:  63 non-terminal A ; terminal +
NEW NEGATIVE TEST:  64 non-terminal A ; terminal ?
current stack: [ 5 ]
visit node: CONFIGURATION (5): [header_2, <;>, main_0] from [<A>, header_2, <;>, main_0]
transitions:
-- by "non-terminal" to (5) (error, not visited)
-- by "terminal" to (5) (error, not visited)
-- by "A" to (5) (error, not visited)
-- by "," to (4) (normal, not visited)
-- by ";" to (6) (normal, not visited)
-- by "::=" to (5) (error, not visited)
-- by "eps" to (5) (error, not visited)
-- by "(" to (5) (error, not visited)
-- by ")" to (5) (error, not visited)
-- by "|" to (5) (error, not visited)
-- by "*" to (5) (error, not visited)
-- by "+" to (5) (error, not visited)
-- by "?" to (5) (error, not visited)
NEW NEGATIVE TEST:  65 non-terminal A ; terminal A
NEW NEGATIVE TEST:  66 non-terminal A ; terminal A non-terminal
NEW NEGATIVE TEST:  67 non-terminal A ; terminal A terminal
NEW NEGATIVE TEST:  68 non-terminal A ; terminal A A
NEW NEGATIVE TEST:  69 non-terminal A ; terminal A ::=
NEW NEGATIVE TEST:  70 non-terminal A ; terminal A eps
NEW NEGATIVE TEST:  71 non-terminal A ; terminal A (
NEW NEGATIVE TEST:  72 non-terminal A ; terminal A )
NEW NEGATIVE TEST:  73 non-terminal A ; terminal A |
NEW NEGATIVE TEST:  74 non-terminal A ; terminal A *
NEW NEGATIVE TEST:  75 non-terminal A ; terminal A +
NEW NEGATIVE TEST:  76 non-terminal A ; terminal A ?
current stack: [ 4 ]
stack visited or empty!:  [ 4 ]
current stack: [ 6 ]
visit node: CONFIGURATION (6): [main_0] from [header_2, <;>, main_0]
transitions:
-- by "non-terminal" to (6) (error, not visited)
-- by "terminal" to (6) (error, not visited)
-- by "A" to (7) (normal, not visited)
-- by "," to (6) (error, not visited)
-- by ";" to (6) (error, not visited)
-- by "::=" to (6) (error, not visited)
-- by "eps" to (6) (error, not visited)
-- by "(" to (6) (error, not visited)
-- by ")" to (6) (error, not visited)
-- by "|" to (6) (error, not visited)
-- by "*" to (6) (error, not visited)
-- by "+" to (6) (error, not visited)
-- by "?" to (6) (error, not visited)
NEW NEGATIVE TEST:  77 non-terminal A ; terminal A ;
NEW NEGATIVE TEST:  78 non-terminal A ; terminal A ; non-terminal
NEW NEGATIVE TEST:  79 non-terminal A ; terminal A ; terminal
NEW NEGATIVE TEST:  80 non-terminal A ; terminal A ; ,
NEW NEGATIVE TEST:  81 non-terminal A ; terminal A ; ;
NEW NEGATIVE TEST:  82 non-terminal A ; terminal A ; ::=
NEW NEGATIVE TEST:  83 non-terminal A ; terminal A ; eps
NEW NEGATIVE TEST:  84 non-terminal A ; terminal A ; (
NEW NEGATIVE TEST:  85 non-terminal A ; terminal A ; )
NEW NEGATIVE TEST:  86 non-terminal A ; terminal A ; |
NEW NEGATIVE TEST:  87 non-terminal A ; terminal A ; *
NEW NEGATIVE TEST:  88 non-terminal A ; terminal A ; +
NEW NEGATIVE TEST:  89 non-terminal A ; terminal A ; ?
current stack: [ 7 ]
visit node: CONFIGURATION (7): [<::=>, complex_item_0, <;>, main_1] from [main_0]
transitions:
-- by "non-terminal" to (8) (error, not visited)
-- by "terminal" to (8) (error, not visited)
-- by "A" to (8) (error, not visited)
-- by "," to (8) (error, not visited)
-- by ";" to (8) (error, not visited)
-- by "::=" to (8) (normal, not visited)
-- by "eps" to (8) (error, not visited)
-- by "(" to (8) (error, not visited)
-- by ")" to (8) (error, not visited)
-- by "|" to (8) (error, not visited)
-- by "*" to (8) (error, not visited)
-- by "+" to (8) (error, not visited)
-- by "?" to (8) (error, not visited)
NEW NEGATIVE TEST:  90 non-terminal A ; terminal A ; A
NEW NEGATIVE TEST:  91 non-terminal A ; terminal A ; A non-terminal
NEW NEGATIVE TEST:  92 non-terminal A ; terminal A ; A terminal
NEW NEGATIVE TEST:  93 non-terminal A ; terminal A ; A A
NEW NEGATIVE TEST:  94 non-terminal A ; terminal A ; A ,
NEW NEGATIVE TEST:  95 non-terminal A ; terminal A ; A ;
NEW NEGATIVE TEST:  96 non-terminal A ; terminal A ; A eps
NEW NEGATIVE TEST:  97 non-terminal A ; terminal A ; A (
NEW NEGATIVE TEST:  98 non-terminal A ; terminal A ; A )
NEW NEGATIVE TEST:  99 non-terminal A ; terminal A ; A |
NEW NEGATIVE TEST:  100 non-terminal A ; terminal A ; A *
NEW NEGATIVE TEST:  101 non-terminal A ; terminal A ; A +
NEW NEGATIVE TEST:  102 non-terminal A ; terminal A ; A ?
current stack: [ 8 ]
visit node: CONFIGURATION (8): [complex_item_0, <;>, main_1] from [<::=>, complex_item_0, <;>, main_1]
transitions:
-- by "non-terminal" to (8) (error, not visited)
-- by "terminal" to (8) (error, not visited)
-- by "A" to (80) (normal, not visited)
-- by "," to (8) (error, not visited)
-- by ";" to (10) (error, not visited)
-- by "::=" to (8) (error, not visited)
-- by "eps" to (80) (normal, not visited)
-- by "(" to (14) (normal, not visited)
-- by ")" to (8) (error, not visited)
-- by "|" to (8) (error, not visited)
-- by "*" to (8) (error, not visited)
-- by "+" to (8) (error, not visited)
-- by "?" to (8) (error, not visited)
NEW NEGATIVE TEST:  103 non-terminal A ; terminal A ; A ::=
NEW NEGATIVE TEST:  104 non-terminal A ; terminal A ; A ::= non-terminal
NEW NEGATIVE TEST:  105 non-terminal A ; terminal A ; A ::= terminal
NEW NEGATIVE TEST:  106 non-terminal A ; terminal A ; A ::= ,
NEW NEGATIVE TEST:  107 non-terminal A ; terminal A ; A ::= ;
NEW NEGATIVE TEST:  108 non-terminal A ; terminal A ; A ::= ::=
NEW NEGATIVE TEST:  109 non-terminal A ; terminal A ; A ::= )
NEW NEGATIVE TEST:  110 non-terminal A ; terminal A ; A ::= |
NEW NEGATIVE TEST:  111 non-terminal A ; terminal A ; A ::= *
NEW NEGATIVE TEST:  112 non-terminal A ; terminal A ; A ::= +
NEW NEGATIVE TEST:  113 non-terminal A ; terminal A ; A ::= ?
current stack: [ 80 ]
visit node: LET NODE (80) for:
CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

current stack: [ 80 ]
stack visited or empty!:  [ 80 ]
current stack: [ 14 ]
visit node: LET NODE (14) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

current stack: [ 16, 31 ]
visit node: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (31) (error, not visited)
-- by "terminal" to (31) (error, not visited)
-- by "," to (31) (error, not visited)
-- by "::=" to (31) (error, not visited)
-- by "*" to (31) (normal, not visited)
-- by "+" to (31) (normal, not visited)
-- by "?" to (31) (normal, not visited)
NEW NEGATIVE TEST:  114 non-terminal A ; terminal A ; A ::= A non-terminal
NEW NEGATIVE TEST:  115 non-terminal A ; terminal A ; A ::= A terminal
NEW NEGATIVE TEST:  116 non-terminal A ; terminal A ; A ::= A A
NEW NEGATIVE TEST:  117 non-terminal A ; terminal A ; A ::= A ,
NEW NEGATIVE TEST:  118 non-terminal A ; terminal A ; A ::= A ;
NEW NEGATIVE TEST:  119 non-terminal A ; terminal A ; A ::= A ::=
NEW NEGATIVE TEST:  120 non-terminal A ; terminal A ; A ::= A eps
NEW NEGATIVE TEST:  121 non-terminal A ; terminal A ; A ::= A (
NEW NEGATIVE TEST:  122 non-terminal A ; terminal A ; A ::= A )
NEW NEGATIVE TEST:  123 non-terminal A ; terminal A ; A ::= A |
current stack: [ 16, 15 ]
visit node: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (15) (error, not visited)
-- by "terminal" to (15) (error, not visited)
-- by "A" to (35) (normal, not visited)
-- by "," to (15) (error, not visited)
-- by ";" to (36) (error, not visited)
-- by "::=" to (15) (error, not visited)
-- by "eps" to (35) (normal, not visited)
-- by "(" to (37) (normal, not visited)
-- by ")" to (38) (error, not visited)
-- by "|" to (42) (error, not visited)
-- by "*" to (15) (error, not visited)
-- by "+" to (15) (error, not visited)
-- by "?" to (15) (error, not visited)
NEW NEGATIVE TEST:  124 non-terminal A ; terminal A ; A ::= (
NEW NEGATIVE TEST:  125 non-terminal A ; terminal A ; A ::= ( non-terminal
NEW NEGATIVE TEST:  126 non-terminal A ; terminal A ; A ::= ( terminal
NEW NEGATIVE TEST:  127 non-terminal A ; terminal A ; A ::= ( ,
NEW NEGATIVE TEST:  128 non-terminal A ; terminal A ; A ::= ( ;
NEW NEGATIVE TEST:  129 non-terminal A ; terminal A ; A ::= ( ::=
NEW NEGATIVE TEST:  130 non-terminal A ; terminal A ; A ::= ( )
NEW NEGATIVE TEST:  131 non-terminal A ; terminal A ; A ::= ( |
NEW NEGATIVE TEST:  132 non-terminal A ; terminal A ; A ::= ( *
NEW NEGATIVE TEST:  133 non-terminal A ; terminal A ; A ::= ( +
NEW NEGATIVE TEST:  134 non-terminal A ; terminal A ; A ::= ( ?
current stack: [ 16 ]
visit node: CONFIGURATION (16): [complex_item_1, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (16) (error, not visited)
-- by "terminal" to (16) (error, not visited)
-- by "A" to (80) (normal, not visited)
-- by "," to (16) (error, not visited)
-- by ";" to (10) (normal, not visited)
-- by "::=" to (16) (error, not visited)
-- by "eps" to (80) (normal, not visited)
-- by "(" to (14) (normal, not visited)
-- by ")" to (16) (error, not visited)
-- by "|" to (20) (normal, not visited)
-- by "*" to (16) (error, not visited)
-- by "+" to (16) (error, not visited)
-- by "?" to (16) (error, not visited)
NEW NEGATIVE TEST:  135 non-terminal A ; terminal A ; A ::= A
NEW NEGATIVE TEST:  136 non-terminal A ; terminal A ; A ::= A non-terminal
NEW NEGATIVE TEST:  137 non-terminal A ; terminal A ; A ::= A terminal
NEW NEGATIVE TEST:  138 non-terminal A ; terminal A ; A ::= A ,
NEW NEGATIVE TEST:  139 non-terminal A ; terminal A ; A ::= A ::=
NEW NEGATIVE TEST:  140 non-terminal A ; terminal A ; A ::= A )
NEW NEGATIVE TEST:  141 non-terminal A ; terminal A ; A ::= A *
NEW NEGATIVE TEST:  142 non-terminal A ; terminal A ; A ::= A +
NEW NEGATIVE TEST:  143 non-terminal A ; terminal A ; A ::= A ?
current stack: [ 16, 31 ]
stack visited or empty!:  [ 16, 31 ]
current stack: [ 16, 31 ]
stack visited or empty!:  [ 16, 31 ]
current stack: [ 16, 31 ]
stack visited or empty!:  [ 16, 31 ]
current stack: [ 16, 35 ]
visit node: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (35) (error, not visited)
-- by "terminal" to (35) (error, not visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (35) (error, not visited)
-- by ";" to (36) (error, not visited)
-- by "::=" to (35) (error, not visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (42) (normal, not visited)
-- by "*" to (35) (normal, not visited)
-- by "+" to (35) (normal, not visited)
-- by "?" to (35) (normal, not visited)
NEW NEGATIVE TEST:  144 non-terminal A ; terminal A ; A ::= ( A
NEW NEGATIVE TEST:  145 non-terminal A ; terminal A ; A ::= ( A non-terminal
NEW NEGATIVE TEST:  146 non-terminal A ; terminal A ; A ::= ( A terminal
NEW NEGATIVE TEST:  147 non-terminal A ; terminal A ; A ::= ( A ,
NEW NEGATIVE TEST:  148 non-terminal A ; terminal A ; A ::= ( A ;
NEW NEGATIVE TEST:  149 non-terminal A ; terminal A ; A ::= ( A ::=
current stack: [ 16, 35 ]
stack visited or empty!:  [ 16, 35 ]
current stack: [ 16, 37 ]
visit node: LET NODE (37) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

current stack: [ 80 ]
stack visited or empty!:  [ 80 ]
current stack: [ 10 ]
visit node: CONFIGURATION (10): [main_1] from [complex_item_0, <;>, main_1]
transitions:
-- by "non-terminal" to (10) (error, not visited)
-- by "terminal" to (10) (error, not visited)
-- by "A" to (7) (normal, not visited)
-- by "," to (10) (error, not visited)
-- by ";" to (10) (error, not visited)
-- by "::=" to (10) (error, not visited)
-- by "eps" to (10) (error, not visited)
-- by "(" to (10) (error, not visited)
-- by ")" to (10) (error, not visited)
-- by "|" to (10) (error, not visited)
-- by "*" to (10) (error, not visited)
-- by "+" to (10) (error, not visited)
-- by "?" to (10) (error, not visited)
NEW NEGATIVE TEST:  150 non-terminal A ; terminal A ; A ::= A ; non-terminal
NEW NEGATIVE TEST:  151 non-terminal A ; terminal A ; A ::= A ; terminal
NEW NEGATIVE TEST:  152 non-terminal A ; terminal A ; A ::= A ; ,
NEW NEGATIVE TEST:  153 non-terminal A ; terminal A ; A ::= A ; ;
NEW NEGATIVE TEST:  154 non-terminal A ; terminal A ; A ::= A ; ::=
NEW NEGATIVE TEST:  155 non-terminal A ; terminal A ; A ::= A ; eps
NEW NEGATIVE TEST:  156 non-terminal A ; terminal A ; A ::= A ; (
NEW NEGATIVE TEST:  157 non-terminal A ; terminal A ; A ::= A ; )
NEW NEGATIVE TEST:  158 non-terminal A ; terminal A ; A ::= A ; |
NEW NEGATIVE TEST:  159 non-terminal A ; terminal A ; A ::= A ; *
NEW NEGATIVE TEST:  160 non-terminal A ; terminal A ; A ::= A ; +
NEW NEGATIVE TEST:  161 non-terminal A ; terminal A ; A ::= A ; ?
current stack: [ 80 ]
stack visited or empty!:  [ 80 ]
current stack: [ 14 ]
stack visited or empty!:  [ 14 ]
current stack: [ 20 ]
visit node: LET NODE (20) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

current stack: [ 16, 64 ]
visit node: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (64) (error, not visited)
-- by "terminal" to (64) (error, not visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (64) (error, not visited)
-- by ";" to (66) (error, not visited)
-- by "::=" to (64) (error, not visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (66) (error, not visited)
-- by "*" to (64) (normal, not visited)
-- by "+" to (64) (normal, not visited)
-- by "?" to (64) (normal, not visited)
NEW NEGATIVE TEST:  162 non-terminal A ; terminal A ; A ::= ( A A
NEW NEGATIVE TEST:  163 non-terminal A ; terminal A ; A ::= ( A A non-terminal
NEW NEGATIVE TEST:  164 non-terminal A ; terminal A ; A ::= ( A A terminal
NEW NEGATIVE TEST:  165 non-terminal A ; terminal A ; A ::= ( A A ,
NEW NEGATIVE TEST:  166 non-terminal A ; terminal A ; A ::= ( A A ;
NEW NEGATIVE TEST:  167 non-terminal A ; terminal A ; A ::= ( A A ::=
NEW NEGATIVE TEST:  168 non-terminal A ; terminal A ; A ::= ( A A |
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 65 ]
visit node: LET NODE (65) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

current stack: [ 16, 38 ]
visit node: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (38) (error, not visited)
-- by "terminal" to (38) (error, not visited)
-- by "," to (38) (error, not visited)
-- by "::=" to (38) (error, not visited)
-- by "*" to (38) (normal, not visited)
-- by "+" to (38) (normal, not visited)
-- by "?" to (38) (normal, not visited)
NEW NEGATIVE TEST:  169 non-terminal A ; terminal A ; A ::= ( A ) non-terminal
NEW NEGATIVE TEST:  170 non-terminal A ; terminal A ; A ::= ( A ) terminal
NEW NEGATIVE TEST:  171 non-terminal A ; terminal A ; A ::= ( A ) A
NEW NEGATIVE TEST:  172 non-terminal A ; terminal A ; A ::= ( A ) ,
NEW NEGATIVE TEST:  173 non-terminal A ; terminal A ; A ::= ( A ) ;
NEW NEGATIVE TEST:  174 non-terminal A ; terminal A ; A ::= ( A ) ::=
NEW NEGATIVE TEST:  175 non-terminal A ; terminal A ; A ::= ( A ) eps
NEW NEGATIVE TEST:  176 non-terminal A ; terminal A ; A ::= ( A ) (
NEW NEGATIVE TEST:  177 non-terminal A ; terminal A ; A ::= ( A ) )
NEW NEGATIVE TEST:  178 non-terminal A ; terminal A ; A ::= ( A ) |
current stack: [ 16, 42 ]
visit node: LET NODE (42) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 35 ]
stack visited or empty!:  [ 16, 35 ]
current stack: [ 16, 35 ]
stack visited or empty!:  [ 16, 35 ]
current stack: [ 16, 35 ]
stack visited or empty!:  [ 16, 35 ]
current stack: [ 16, 36, 15 ]
visit node: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (15) (error, visited)
-- by "terminal" to (15) (error, visited)
-- by "A" to (35) (normal, not visited)
-- by "," to (15) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (15) (error, visited)
-- by "eps" to (35) (normal, not visited)
-- by "(" to (37) (normal, not visited)
-- by ")" to (38) (error, visited)
-- by "|" to (42) (error, visited)
-- by "*" to (15) (error, visited)
-- by "+" to (15) (error, visited)
-- by "?" to (15) (error, visited)
NEW NEGATIVE TEST:  179 non-terminal A ; terminal A ; A ::= ( (
NEW NEGATIVE TEST:  180 non-terminal A ; terminal A ; A ::= ( ( non-terminal
NEW NEGATIVE TEST:  181 non-terminal A ; terminal A ; A ::= ( ( terminal
NEW NEGATIVE TEST:  182 non-terminal A ; terminal A ; A ::= ( ( ,
NEW NEGATIVE TEST:  183 non-terminal A ; terminal A ; A ::= ( ( ;
NEW NEGATIVE TEST:  184 non-terminal A ; terminal A ; A ::= ( ( ::=
NEW NEGATIVE TEST:  185 non-terminal A ; terminal A ; A ::= ( ( )
NEW NEGATIVE TEST:  186 non-terminal A ; terminal A ; A ::= ( ( |
NEW NEGATIVE TEST:  187 non-terminal A ; terminal A ; A ::= ( ( *
NEW NEGATIVE TEST:  188 non-terminal A ; terminal A ; A ::= ( ( +
NEW NEGATIVE TEST:  189 non-terminal A ; terminal A ; A ::= ( ( ?
current stack: [ 7 ]
stack visited or empty!:  [ 7 ]
current stack: [ 22, 21 ]
visit node: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (21) (error, not visited)
-- by "terminal" to (21) (error, not visited)
-- by "A" to (31) (normal, not visited)
-- by "," to (21) (error, not visited)
-- by "::=" to (21) (error, not visited)
-- by "eps" to (31) (normal, not visited)
-- by "(" to (15) (normal, not visited)
-- by "*" to (21) (error, not visited)
-- by "+" to (21) (error, not visited)
-- by "?" to (21) (error, not visited)
NEW NEGATIVE TEST:  190 non-terminal A ; terminal A ; A ::= A |
NEW NEGATIVE TEST:  191 non-terminal A ; terminal A ; A ::= A | non-terminal
NEW NEGATIVE TEST:  192 non-terminal A ; terminal A ; A ::= A | terminal
NEW NEGATIVE TEST:  193 non-terminal A ; terminal A ; A ::= A | ,
NEW NEGATIVE TEST:  194 non-terminal A ; terminal A ; A ::= A | ;
NEW NEGATIVE TEST:  195 non-terminal A ; terminal A ; A ::= A | ::=
NEW NEGATIVE TEST:  196 non-terminal A ; terminal A ; A ::= A | )
NEW NEGATIVE TEST:  197 non-terminal A ; terminal A ; A ::= A | |
NEW NEGATIVE TEST:  198 non-terminal A ; terminal A ; A ::= A | *
NEW NEGATIVE TEST:  199 non-terminal A ; terminal A ; A ::= A | +
NEW NEGATIVE TEST:  200 non-terminal A ; terminal A ; A ::= A | ?
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 65 ]
stack visited or empty!:  [ 16, 65 ]
current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 66, 15 ]
visit node: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (15) (error, visited)
-- by "terminal" to (15) (error, visited)
-- by "A" to (35) (normal, not visited)
-- by "," to (15) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (15) (error, visited)
-- by "eps" to (35) (normal, not visited)
-- by "(" to (37) (normal, not visited)
-- by ")" to (38) (error, visited)
-- by "|" to (42) (error, visited)
-- by "*" to (15) (error, visited)
-- by "+" to (15) (error, visited)
-- by "?" to (15) (error, visited)
NEW NEGATIVE TEST:  201 non-terminal A ; terminal A ; A ::= ( A (
NEW NEGATIVE TEST:  202 non-terminal A ; terminal A ; A ::= ( A ( non-terminal
NEW NEGATIVE TEST:  203 non-terminal A ; terminal A ; A ::= ( A ( terminal
NEW NEGATIVE TEST:  204 non-terminal A ; terminal A ; A ::= ( A ( ,
NEW NEGATIVE TEST:  205 non-terminal A ; terminal A ; A ::= ( A ( ;
NEW NEGATIVE TEST:  206 non-terminal A ; terminal A ; A ::= ( A ( ::=
NEW NEGATIVE TEST:  207 non-terminal A ; terminal A ; A ::= ( A ( )
NEW NEGATIVE TEST:  208 non-terminal A ; terminal A ; A ::= ( A ( |
NEW NEGATIVE TEST:  209 non-terminal A ; terminal A ; A ::= ( A ( *
NEW NEGATIVE TEST:  210 non-terminal A ; terminal A ; A ::= ( A ( +
NEW NEGATIVE TEST:  211 non-terminal A ; terminal A ; A ::= ( A ( ?
current stack: [ 16 ]
stack visited or empty!:  [ 16 ]
current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 43, 21 ]
visit node: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (21) (error, visited)
-- by "terminal" to (21) (error, visited)
-- by "A" to (31) (normal, not visited)
-- by "," to (21) (error, visited)
-- by "::=" to (21) (error, visited)
-- by "eps" to (31) (normal, not visited)
-- by "(" to (15) (normal, not visited)
-- by "*" to (21) (error, visited)
-- by "+" to (21) (error, visited)
-- by "?" to (21) (error, visited)
NEW NEGATIVE TEST:  212 non-terminal A ; terminal A ; A ::= ( A |
NEW NEGATIVE TEST:  213 non-terminal A ; terminal A ; A ::= ( A | non-terminal
NEW NEGATIVE TEST:  214 non-terminal A ; terminal A ; A ::= ( A | terminal
NEW NEGATIVE TEST:  215 non-terminal A ; terminal A ; A ::= ( A | ,
NEW NEGATIVE TEST:  216 non-terminal A ; terminal A ; A ::= ( A | ;
NEW NEGATIVE TEST:  217 non-terminal A ; terminal A ; A ::= ( A | ::=
NEW NEGATIVE TEST:  218 non-terminal A ; terminal A ; A ::= ( A | )
NEW NEGATIVE TEST:  219 non-terminal A ; terminal A ; A ::= ( A | |
NEW NEGATIVE TEST:  220 non-terminal A ; terminal A ; A ::= ( A | *
NEW NEGATIVE TEST:  221 non-terminal A ; terminal A ; A ::= ( A | +
NEW NEGATIVE TEST:  222 non-terminal A ; terminal A ; A ::= ( A | ?
current stack: [ 16, 36, 35 ]
visit node: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (35) (error, visited)
-- by "terminal" to (35) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (35) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (35) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (42) (normal, not visited)
-- by "*" to (35) (normal, not visited)
-- by "+" to (35) (normal, not visited)
-- by "?" to (35) (normal, not visited)
NEW NEGATIVE TEST:  223 non-terminal A ; terminal A ; A ::= ( ( A
NEW NEGATIVE TEST:  224 non-terminal A ; terminal A ; A ::= ( ( A non-terminal
NEW NEGATIVE TEST:  225 non-terminal A ; terminal A ; A ::= ( ( A terminal
NEW NEGATIVE TEST:  226 non-terminal A ; terminal A ; A ::= ( ( A ,
NEW NEGATIVE TEST:  227 non-terminal A ; terminal A ; A ::= ( ( A ;
NEW NEGATIVE TEST:  228 non-terminal A ; terminal A ; A ::= ( ( A ::=
current stack: [ 16, 36, 35 ]
stack visited or empty!:  [ 16, 36, 35 ]
current stack: [ 16, 36, 37 ]
visit node: LET NODE (37) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

current stack: [ 22, 31 ]
visit node: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (31) (error, visited)
-- by "terminal" to (31) (error, visited)
-- by "," to (31) (error, visited)
-- by "::=" to (31) (error, visited)
-- by "*" to (31) (normal, not visited)
-- by "+" to (31) (normal, not visited)
-- by "?" to (31) (normal, not visited)
NEW NEGATIVE TEST:  229 non-terminal A ; terminal A ; A ::= A | A non-terminal
NEW NEGATIVE TEST:  230 non-terminal A ; terminal A ; A ::= A | A terminal
NEW NEGATIVE TEST:  231 non-terminal A ; terminal A ; A ::= A | A A
NEW NEGATIVE TEST:  232 non-terminal A ; terminal A ; A ::= A | A ,
NEW NEGATIVE TEST:  233 non-terminal A ; terminal A ; A ::= A | A ;
NEW NEGATIVE TEST:  234 non-terminal A ; terminal A ; A ::= A | A ::=
NEW NEGATIVE TEST:  235 non-terminal A ; terminal A ; A ::= A | A eps
NEW NEGATIVE TEST:  236 non-terminal A ; terminal A ; A ::= A | A (
NEW NEGATIVE TEST:  237 non-terminal A ; terminal A ; A ::= A | A )
NEW NEGATIVE TEST:  238 non-terminal A ; terminal A ; A ::= A | A |
current stack: [ 22, 31 ]
stack visited or empty!:  [ 22, 31 ]
current stack: [ 22, 15 ]
visit node: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (15) (error, visited)
-- by "terminal" to (15) (error, visited)
-- by "A" to (35) (normal, not visited)
-- by "," to (15) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (15) (error, visited)
-- by "eps" to (35) (normal, not visited)
-- by "(" to (37) (normal, not visited)
-- by ")" to (38) (error, visited)
-- by "|" to (42) (error, visited)
-- by "*" to (15) (error, visited)
-- by "+" to (15) (error, visited)
-- by "?" to (15) (error, visited)
NEW NEGATIVE TEST:  239 non-terminal A ; terminal A ; A ::= A | (
NEW NEGATIVE TEST:  240 non-terminal A ; terminal A ; A ::= A | ( non-terminal
NEW NEGATIVE TEST:  241 non-terminal A ; terminal A ; A ::= A | ( terminal
NEW NEGATIVE TEST:  242 non-terminal A ; terminal A ; A ::= A | ( ,
NEW NEGATIVE TEST:  243 non-terminal A ; terminal A ; A ::= A | ( ;
NEW NEGATIVE TEST:  244 non-terminal A ; terminal A ; A ::= A | ( ::=
NEW NEGATIVE TEST:  245 non-terminal A ; terminal A ; A ::= A | ( )
NEW NEGATIVE TEST:  246 non-terminal A ; terminal A ; A ::= A | ( |
NEW NEGATIVE TEST:  247 non-terminal A ; terminal A ; A ::= A | ( *
NEW NEGATIVE TEST:  248 non-terminal A ; terminal A ; A ::= A | ( +
NEW NEGATIVE TEST:  249 non-terminal A ; terminal A ; A ::= A | ( ?
current stack: [ 16, 66, 35 ]
visit node: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (35) (error, visited)
-- by "terminal" to (35) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (35) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (35) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (42) (normal, not visited)
-- by "*" to (35) (normal, not visited)
-- by "+" to (35) (normal, not visited)
-- by "?" to (35) (normal, not visited)
NEW NEGATIVE TEST:  250 non-terminal A ; terminal A ; A ::= ( A ( A
NEW NEGATIVE TEST:  251 non-terminal A ; terminal A ; A ::= ( A ( A non-terminal
NEW NEGATIVE TEST:  252 non-terminal A ; terminal A ; A ::= ( A ( A terminal
NEW NEGATIVE TEST:  253 non-terminal A ; terminal A ; A ::= ( A ( A ,
NEW NEGATIVE TEST:  254 non-terminal A ; terminal A ; A ::= ( A ( A ;
NEW NEGATIVE TEST:  255 non-terminal A ; terminal A ; A ::= ( A ( A ::=
current stack: [ 16, 66, 35 ]
stack visited or empty!:  [ 16, 66, 35 ]
current stack: [ 16, 66, 37 ]
visit node: LET NODE (37) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

current stack: [ 16, 43, 31 ]
visit node: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (31) (error, visited)
-- by "terminal" to (31) (error, visited)
-- by "," to (31) (error, visited)
-- by "::=" to (31) (error, visited)
-- by "*" to (31) (normal, not visited)
-- by "+" to (31) (normal, not visited)
-- by "?" to (31) (normal, not visited)
NEW NEGATIVE TEST:  256 non-terminal A ; terminal A ; A ::= ( A | A non-terminal
NEW NEGATIVE TEST:  257 non-terminal A ; terminal A ; A ::= ( A | A terminal
NEW NEGATIVE TEST:  258 non-terminal A ; terminal A ; A ::= ( A | A A
NEW NEGATIVE TEST:  259 non-terminal A ; terminal A ; A ::= ( A | A ,
NEW NEGATIVE TEST:  260 non-terminal A ; terminal A ; A ::= ( A | A ;
NEW NEGATIVE TEST:  261 non-terminal A ; terminal A ; A ::= ( A | A ::=
NEW NEGATIVE TEST:  262 non-terminal A ; terminal A ; A ::= ( A | A eps
NEW NEGATIVE TEST:  263 non-terminal A ; terminal A ; A ::= ( A | A (
NEW NEGATIVE TEST:  264 non-terminal A ; terminal A ; A ::= ( A | A )
NEW NEGATIVE TEST:  265 non-terminal A ; terminal A ; A ::= ( A | A |
current stack: [ 16, 43, 31 ]
stack visited or empty!:  [ 16, 43, 31 ]
current stack: [ 16, 43, 15 ]
visit node: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (15) (error, visited)
-- by "terminal" to (15) (error, visited)
-- by "A" to (35) (normal, not visited)
-- by "," to (15) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (15) (error, visited)
-- by "eps" to (35) (normal, not visited)
-- by "(" to (37) (normal, not visited)
-- by ")" to (38) (error, visited)
-- by "|" to (42) (error, visited)
-- by "*" to (15) (error, visited)
-- by "+" to (15) (error, visited)
-- by "?" to (15) (error, visited)
NEW NEGATIVE TEST:  266 non-terminal A ; terminal A ; A ::= ( A | (
NEW NEGATIVE TEST:  267 non-terminal A ; terminal A ; A ::= ( A | ( non-terminal
NEW NEGATIVE TEST:  268 non-terminal A ; terminal A ; A ::= ( A | ( terminal
NEW NEGATIVE TEST:  269 non-terminal A ; terminal A ; A ::= ( A | ( ,
NEW NEGATIVE TEST:  270 non-terminal A ; terminal A ; A ::= ( A | ( ;
NEW NEGATIVE TEST:  271 non-terminal A ; terminal A ; A ::= ( A | ( ::=
NEW NEGATIVE TEST:  272 non-terminal A ; terminal A ; A ::= ( A | ( )
NEW NEGATIVE TEST:  273 non-terminal A ; terminal A ; A ::= ( A | ( |
NEW NEGATIVE TEST:  274 non-terminal A ; terminal A ; A ::= ( A | ( *
NEW NEGATIVE TEST:  275 non-terminal A ; terminal A ; A ::= ( A | ( +
NEW NEGATIVE TEST:  276 non-terminal A ; terminal A ; A ::= ( A | ( ?
current stack: [ 16, 36, 64 ]
visit node: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (64) (error, visited)
-- by "terminal" to (64) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (64) (error, visited)
-- by ";" to (66) (error, visited)
-- by "::=" to (64) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (66) (error, visited)
-- by "*" to (64) (normal, not visited)
-- by "+" to (64) (normal, not visited)
-- by "?" to (64) (normal, not visited)
NEW NEGATIVE TEST:  277 non-terminal A ; terminal A ; A ::= ( ( A A
NEW NEGATIVE TEST:  278 non-terminal A ; terminal A ; A ::= ( ( A A non-terminal
NEW NEGATIVE TEST:  279 non-terminal A ; terminal A ; A ::= ( ( A A terminal
NEW NEGATIVE TEST:  280 non-terminal A ; terminal A ; A ::= ( ( A A ,
NEW NEGATIVE TEST:  281 non-terminal A ; terminal A ; A ::= ( ( A A ;
NEW NEGATIVE TEST:  282 non-terminal A ; terminal A ; A ::= ( ( A A ::=
NEW NEGATIVE TEST:  283 non-terminal A ; terminal A ; A ::= ( ( A A |
current stack: [ 16, 36, 64 ]
stack visited or empty!:  [ 16, 36, 64 ]
current stack: [ 16, 36, 65 ]
visit node: LET NODE (65) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

current stack: [ 16, 36, 38 ]
visit node: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (38) (error, visited)
-- by "terminal" to (38) (error, visited)
-- by "," to (38) (error, visited)
-- by "::=" to (38) (error, visited)
-- by "*" to (38) (normal, not visited)
-- by "+" to (38) (normal, not visited)
-- by "?" to (38) (normal, not visited)
NEW NEGATIVE TEST:  284 non-terminal A ; terminal A ; A ::= ( ( A ) non-terminal
NEW NEGATIVE TEST:  285 non-terminal A ; terminal A ; A ::= ( ( A ) terminal
NEW NEGATIVE TEST:  286 non-terminal A ; terminal A ; A ::= ( ( A ) A
NEW NEGATIVE TEST:  287 non-terminal A ; terminal A ; A ::= ( ( A ) ,
NEW NEGATIVE TEST:  288 non-terminal A ; terminal A ; A ::= ( ( A ) ;
NEW NEGATIVE TEST:  289 non-terminal A ; terminal A ; A ::= ( ( A ) ::=
NEW NEGATIVE TEST:  290 non-terminal A ; terminal A ; A ::= ( ( A ) eps
NEW NEGATIVE TEST:  291 non-terminal A ; terminal A ; A ::= ( ( A ) (
NEW NEGATIVE TEST:  292 non-terminal A ; terminal A ; A ::= ( ( A ) )
NEW NEGATIVE TEST:  293 non-terminal A ; terminal A ; A ::= ( ( A ) |
current stack: [ 16, 36, 42 ]
visit node: LET NODE (42) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 36, 35 ]
stack visited or empty!:  [ 16, 36, 35 ]
current stack: [ 16, 36, 35 ]
stack visited or empty!:  [ 16, 36, 35 ]
current stack: [ 16, 36, 35 ]
stack visited or empty!:  [ 16, 36, 35 ]
current stack: [ 22 ]
visit node: CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (22) (error, not visited)
-- by "terminal" to (22) (error, not visited)
-- by "A" to (30) (normal, not visited)
-- by "," to (22) (error, not visited)
-- by ";" to (10) (normal, not visited)
-- by "::=" to (22) (error, not visited)
-- by "eps" to (30) (normal, not visited)
-- by "(" to (28) (normal, not visited)
-- by ")" to (22) (error, not visited)
-- by "|" to (25) (normal, not visited)
-- by "*" to (22) (error, not visited)
-- by "+" to (22) (error, not visited)
-- by "?" to (22) (error, not visited)
NEW NEGATIVE TEST:  294 non-terminal A ; terminal A ; A ::= A | A
NEW NEGATIVE TEST:  295 non-terminal A ; terminal A ; A ::= A | A non-terminal
NEW NEGATIVE TEST:  296 non-terminal A ; terminal A ; A ::= A | A terminal
NEW NEGATIVE TEST:  297 non-terminal A ; terminal A ; A ::= A | A ,
NEW NEGATIVE TEST:  298 non-terminal A ; terminal A ; A ::= A | A ::=
NEW NEGATIVE TEST:  299 non-terminal A ; terminal A ; A ::= A | A )
NEW NEGATIVE TEST:  300 non-terminal A ; terminal A ; A ::= A | A *
NEW NEGATIVE TEST:  301 non-terminal A ; terminal A ; A ::= A | A +
NEW NEGATIVE TEST:  302 non-terminal A ; terminal A ; A ::= A | A ?
current stack: [ 22, 31 ]
stack visited or empty!:  [ 22, 31 ]
current stack: [ 22, 31 ]
stack visited or empty!:  [ 22, 31 ]
current stack: [ 22, 31 ]
stack visited or empty!:  [ 22, 31 ]
current stack: [ 22, 35 ]
visit node: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (35) (error, visited)
-- by "terminal" to (35) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (35) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (35) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (42) (normal, not visited)
-- by "*" to (35) (normal, not visited)
-- by "+" to (35) (normal, not visited)
-- by "?" to (35) (normal, not visited)
NEW NEGATIVE TEST:  303 non-terminal A ; terminal A ; A ::= A | ( A
NEW NEGATIVE TEST:  304 non-terminal A ; terminal A ; A ::= A | ( A non-terminal
NEW NEGATIVE TEST:  305 non-terminal A ; terminal A ; A ::= A | ( A terminal
NEW NEGATIVE TEST:  306 non-terminal A ; terminal A ; A ::= A | ( A ,
NEW NEGATIVE TEST:  307 non-terminal A ; terminal A ; A ::= A | ( A ;
NEW NEGATIVE TEST:  308 non-terminal A ; terminal A ; A ::= A | ( A ::=
current stack: [ 22, 35 ]
stack visited or empty!:  [ 22, 35 ]
current stack: [ 22, 37 ]
visit node: LET NODE (37) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

current stack: [ 16, 66, 64 ]
visit node: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (64) (error, visited)
-- by "terminal" to (64) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (64) (error, visited)
-- by ";" to (66) (error, visited)
-- by "::=" to (64) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (66) (error, visited)
-- by "*" to (64) (normal, not visited)
-- by "+" to (64) (normal, not visited)
-- by "?" to (64) (normal, not visited)
NEW NEGATIVE TEST:  309 non-terminal A ; terminal A ; A ::= ( A ( A A
NEW NEGATIVE TEST:  310 non-terminal A ; terminal A ; A ::= ( A ( A A non-terminal
NEW NEGATIVE TEST:  311 non-terminal A ; terminal A ; A ::= ( A ( A A terminal
NEW NEGATIVE TEST:  312 non-terminal A ; terminal A ; A ::= ( A ( A A ,
NEW NEGATIVE TEST:  313 non-terminal A ; terminal A ; A ::= ( A ( A A ;
NEW NEGATIVE TEST:  314 non-terminal A ; terminal A ; A ::= ( A ( A A ::=
NEW NEGATIVE TEST:  315 non-terminal A ; terminal A ; A ::= ( A ( A A |
current stack: [ 16, 66, 64 ]
stack visited or empty!:  [ 16, 66, 64 ]
current stack: [ 16, 66, 65 ]
visit node: LET NODE (65) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

current stack: [ 16, 66, 38 ]
visit node: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (38) (error, visited)
-- by "terminal" to (38) (error, visited)
-- by "," to (38) (error, visited)
-- by "::=" to (38) (error, visited)
-- by "*" to (38) (normal, not visited)
-- by "+" to (38) (normal, not visited)
-- by "?" to (38) (normal, not visited)
NEW NEGATIVE TEST:  316 non-terminal A ; terminal A ; A ::= ( A ( A ) non-terminal
NEW NEGATIVE TEST:  317 non-terminal A ; terminal A ; A ::= ( A ( A ) terminal
NEW NEGATIVE TEST:  318 non-terminal A ; terminal A ; A ::= ( A ( A ) A
NEW NEGATIVE TEST:  319 non-terminal A ; terminal A ; A ::= ( A ( A ) ,
NEW NEGATIVE TEST:  320 non-terminal A ; terminal A ; A ::= ( A ( A ) ;
NEW NEGATIVE TEST:  321 non-terminal A ; terminal A ; A ::= ( A ( A ) ::=
NEW NEGATIVE TEST:  322 non-terminal A ; terminal A ; A ::= ( A ( A ) eps
NEW NEGATIVE TEST:  323 non-terminal A ; terminal A ; A ::= ( A ( A ) (
NEW NEGATIVE TEST:  324 non-terminal A ; terminal A ; A ::= ( A ( A ) )
NEW NEGATIVE TEST:  325 non-terminal A ; terminal A ; A ::= ( A ( A ) |
current stack: [ 16, 66, 42 ]
visit node: LET NODE (42) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 66, 35 ]
stack visited or empty!:  [ 16, 66, 35 ]
current stack: [ 16, 66, 35 ]
stack visited or empty!:  [ 16, 66, 35 ]
current stack: [ 16, 66, 35 ]
stack visited or empty!:  [ 16, 66, 35 ]
current stack: [ 16, 43 ]
visit node: CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (43) (error, not visited)
-- by "terminal" to (43) (error, not visited)
-- by "A" to (63) (normal, not visited)
-- by "," to (43) (error, not visited)
-- by ";" to (43) (error, not visited)
-- by "::=" to (43) (error, not visited)
-- by "eps" to (63) (normal, not visited)
-- by "(" to (61) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (49) (normal, not visited)
-- by "*" to (43) (error, not visited)
-- by "+" to (43) (error, not visited)
-- by "?" to (43) (error, not visited)
NEW NEGATIVE TEST:  326 non-terminal A ; terminal A ; A ::= ( A | A
NEW NEGATIVE TEST:  327 non-terminal A ; terminal A ; A ::= ( A | A non-terminal
NEW NEGATIVE TEST:  328 non-terminal A ; terminal A ; A ::= ( A | A terminal
NEW NEGATIVE TEST:  329 non-terminal A ; terminal A ; A ::= ( A | A ,
NEW NEGATIVE TEST:  330 non-terminal A ; terminal A ; A ::= ( A | A ;
NEW NEGATIVE TEST:  331 non-terminal A ; terminal A ; A ::= ( A | A ::=
NEW NEGATIVE TEST:  332 non-terminal A ; terminal A ; A ::= ( A | A *
NEW NEGATIVE TEST:  333 non-terminal A ; terminal A ; A ::= ( A | A +
NEW NEGATIVE TEST:  334 non-terminal A ; terminal A ; A ::= ( A | A ?
current stack: [ 16, 43, 31 ]
stack visited or empty!:  [ 16, 43, 31 ]
current stack: [ 16, 43, 31 ]
stack visited or empty!:  [ 16, 43, 31 ]
current stack: [ 16, 43, 31 ]
stack visited or empty!:  [ 16, 43, 31 ]
current stack: [ 16, 43, 35 ]
visit node: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (35) (error, visited)
-- by "terminal" to (35) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (35) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (35) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (42) (normal, not visited)
-- by "*" to (35) (normal, not visited)
-- by "+" to (35) (normal, not visited)
-- by "?" to (35) (normal, not visited)
NEW NEGATIVE TEST:  335 non-terminal A ; terminal A ; A ::= ( A | ( A
NEW NEGATIVE TEST:  336 non-terminal A ; terminal A ; A ::= ( A | ( A non-terminal
NEW NEGATIVE TEST:  337 non-terminal A ; terminal A ; A ::= ( A | ( A terminal
NEW NEGATIVE TEST:  338 non-terminal A ; terminal A ; A ::= ( A | ( A ,
NEW NEGATIVE TEST:  339 non-terminal A ; terminal A ; A ::= ( A | ( A ;
NEW NEGATIVE TEST:  340 non-terminal A ; terminal A ; A ::= ( A | ( A ::=
current stack: [ 16, 43, 35 ]
stack visited or empty!:  [ 16, 43, 35 ]
current stack: [ 16, 43, 37 ]
visit node: LET NODE (37) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

current stack: [ 16, 36, 64 ]
stack visited or empty!:  [ 16, 36, 64 ]
current stack: [ 16, 36, 64 ]
stack visited or empty!:  [ 16, 36, 64 ]
current stack: [ 16, 36, 65 ]
stack visited or empty!:  [ 16, 36, 65 ]
current stack: [ 16, 36, 38 ]
stack visited or empty!:  [ 16, 36, 38 ]
current stack: [ 16, 36, 64 ]
stack visited or empty!:  [ 16, 36, 64 ]
current stack: [ 16, 36, 64 ]
stack visited or empty!:  [ 16, 36, 64 ]
current stack: [ 16, 36, 64 ]
stack visited or empty!:  [ 16, 36, 64 ]
current stack: [ 16, 36 ]
visit node: CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (36) (error, not visited)
-- by "terminal" to (36) (error, not visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (36) (error, not visited)
-- by ";" to (36) (error, not visited)
-- by "::=" to (36) (error, not visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (42) (normal, not visited)
-- by "*" to (36) (error, not visited)
-- by "+" to (36) (error, not visited)
-- by "?" to (36) (error, not visited)
NEW NEGATIVE TEST:  341 non-terminal A ; terminal A ; A ::= ( ( A )
NEW NEGATIVE TEST:  342 non-terminal A ; terminal A ; A ::= ( ( A ) non-terminal
NEW NEGATIVE TEST:  343 non-terminal A ; terminal A ; A ::= ( ( A ) terminal
NEW NEGATIVE TEST:  344 non-terminal A ; terminal A ; A ::= ( ( A ) ,
NEW NEGATIVE TEST:  345 non-terminal A ; terminal A ; A ::= ( ( A ) ;
NEW NEGATIVE TEST:  346 non-terminal A ; terminal A ; A ::= ( ( A ) ::=
NEW NEGATIVE TEST:  347 non-terminal A ; terminal A ; A ::= ( ( A ) *
NEW NEGATIVE TEST:  348 non-terminal A ; terminal A ; A ::= ( ( A ) +
NEW NEGATIVE TEST:  349 non-terminal A ; terminal A ; A ::= ( ( A ) ?
current stack: [ 16, 36, 38 ]
stack visited or empty!:  [ 16, 36, 38 ]
current stack: [ 16, 36, 38 ]
stack visited or empty!:  [ 16, 36, 38 ]
current stack: [ 16, 36, 38 ]
stack visited or empty!:  [ 16, 36, 38 ]
current stack: [ 30 ]
visit node: LET NODE (30) for:
CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

current stack: [ 10 ]
stack visited or empty!:  [ 10 ]
current stack: [ 30 ]
stack visited or empty!:  [ 30 ]
current stack: [ 28 ]
visit node: LET NODE (28) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (22): [complex_item_3, complex_item_2, <;>, main_1] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

current stack: [ 25 ]
visit node: CONFIGURATION (25): [item_0, complex_item_3, complex_item_2, <;>, main_1] from [complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (25) (error, not visited)
-- by "terminal" to (25) (error, not visited)
-- by "A" to (30) (normal, not visited)
-- by "," to (25) (error, not visited)
-- by ";" to (10) (error, not visited)
-- by "::=" to (25) (error, not visited)
-- by "eps" to (30) (normal, not visited)
-- by "(" to (28) (normal, not visited)
-- by ")" to (22) (error, not visited)
-- by "|" to (25) (error, not visited)
-- by "*" to (25) (error, not visited)
-- by "+" to (25) (error, not visited)
-- by "?" to (25) (error, not visited)
NEW NEGATIVE TEST:  350 non-terminal A ; terminal A ; A ::= A | A |
NEW NEGATIVE TEST:  351 non-terminal A ; terminal A ; A ::= A | A | non-terminal
NEW NEGATIVE TEST:  352 non-terminal A ; terminal A ; A ::= A | A | terminal
NEW NEGATIVE TEST:  353 non-terminal A ; terminal A ; A ::= A | A | ,
NEW NEGATIVE TEST:  354 non-terminal A ; terminal A ; A ::= A | A | ;
NEW NEGATIVE TEST:  355 non-terminal A ; terminal A ; A ::= A | A | ::=
NEW NEGATIVE TEST:  356 non-terminal A ; terminal A ; A ::= A | A | )
NEW NEGATIVE TEST:  357 non-terminal A ; terminal A ; A ::= A | A | |
NEW NEGATIVE TEST:  358 non-terminal A ; terminal A ; A ::= A | A | *
NEW NEGATIVE TEST:  359 non-terminal A ; terminal A ; A ::= A | A | +
NEW NEGATIVE TEST:  360 non-terminal A ; terminal A ; A ::= A | A | ?
current stack: [ 22, 64 ]
visit node: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (64) (error, visited)
-- by "terminal" to (64) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (64) (error, visited)
-- by ";" to (66) (error, visited)
-- by "::=" to (64) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (66) (error, visited)
-- by "*" to (64) (normal, not visited)
-- by "+" to (64) (normal, not visited)
-- by "?" to (64) (normal, not visited)
NEW NEGATIVE TEST:  361 non-terminal A ; terminal A ; A ::= A | ( A A
NEW NEGATIVE TEST:  362 non-terminal A ; terminal A ; A ::= A | ( A A non-terminal
NEW NEGATIVE TEST:  363 non-terminal A ; terminal A ; A ::= A | ( A A terminal
NEW NEGATIVE TEST:  364 non-terminal A ; terminal A ; A ::= A | ( A A ,
NEW NEGATIVE TEST:  365 non-terminal A ; terminal A ; A ::= A | ( A A ;
NEW NEGATIVE TEST:  366 non-terminal A ; terminal A ; A ::= A | ( A A ::=
NEW NEGATIVE TEST:  367 non-terminal A ; terminal A ; A ::= A | ( A A |
current stack: [ 22, 64 ]
stack visited or empty!:  [ 22, 64 ]
current stack: [ 22, 65 ]
visit node: LET NODE (65) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

current stack: [ 22, 38 ]
visit node: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (38) (error, visited)
-- by "terminal" to (38) (error, visited)
-- by "," to (38) (error, visited)
-- by "::=" to (38) (error, visited)
-- by "*" to (38) (normal, not visited)
-- by "+" to (38) (normal, not visited)
-- by "?" to (38) (normal, not visited)
NEW NEGATIVE TEST:  368 non-terminal A ; terminal A ; A ::= A | ( A ) non-terminal
NEW NEGATIVE TEST:  369 non-terminal A ; terminal A ; A ::= A | ( A ) terminal
NEW NEGATIVE TEST:  370 non-terminal A ; terminal A ; A ::= A | ( A ) A
NEW NEGATIVE TEST:  371 non-terminal A ; terminal A ; A ::= A | ( A ) ,
NEW NEGATIVE TEST:  372 non-terminal A ; terminal A ; A ::= A | ( A ) ;
NEW NEGATIVE TEST:  373 non-terminal A ; terminal A ; A ::= A | ( A ) ::=
NEW NEGATIVE TEST:  374 non-terminal A ; terminal A ; A ::= A | ( A ) eps
NEW NEGATIVE TEST:  375 non-terminal A ; terminal A ; A ::= A | ( A ) (
NEW NEGATIVE TEST:  376 non-terminal A ; terminal A ; A ::= A | ( A ) )
NEW NEGATIVE TEST:  377 non-terminal A ; terminal A ; A ::= A | ( A ) |
current stack: [ 22, 42 ]
visit node: LET NODE (42) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 22, 35 ]
stack visited or empty!:  [ 22, 35 ]
current stack: [ 22, 35 ]
stack visited or empty!:  [ 22, 35 ]
current stack: [ 22, 35 ]
stack visited or empty!:  [ 22, 35 ]
current stack: [ 16, 66, 64 ]
stack visited or empty!:  [ 16, 66, 64 ]
current stack: [ 16, 66, 64 ]
stack visited or empty!:  [ 16, 66, 64 ]
current stack: [ 16, 66, 65 ]
stack visited or empty!:  [ 16, 66, 65 ]
current stack: [ 16, 66, 38 ]
stack visited or empty!:  [ 16, 66, 38 ]
current stack: [ 16, 66, 64 ]
stack visited or empty!:  [ 16, 66, 64 ]
current stack: [ 16, 66, 64 ]
stack visited or empty!:  [ 16, 66, 64 ]
current stack: [ 16, 66, 64 ]
stack visited or empty!:  [ 16, 66, 64 ]
current stack: [ 16, 66 ]
visit node: CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]
transitions:
-- by "non-terminal" to (66) (error, not visited)
-- by "terminal" to (66) (error, not visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (66) (error, not visited)
-- by ";" to (66) (error, not visited)
-- by "::=" to (66) (error, not visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (73) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (66) (error, not visited)
-- by "*" to (66) (error, not visited)
-- by "+" to (66) (error, not visited)
-- by "?" to (66) (error, not visited)
NEW NEGATIVE TEST:  378 non-terminal A ; terminal A ; A ::= ( A ( A )
NEW NEGATIVE TEST:  379 non-terminal A ; terminal A ; A ::= ( A ( A ) non-terminal
NEW NEGATIVE TEST:  380 non-terminal A ; terminal A ; A ::= ( A ( A ) terminal
NEW NEGATIVE TEST:  381 non-terminal A ; terminal A ; A ::= ( A ( A ) ,
NEW NEGATIVE TEST:  382 non-terminal A ; terminal A ; A ::= ( A ( A ) ;
NEW NEGATIVE TEST:  383 non-terminal A ; terminal A ; A ::= ( A ( A ) ::=
NEW NEGATIVE TEST:  384 non-terminal A ; terminal A ; A ::= ( A ( A ) |
NEW NEGATIVE TEST:  385 non-terminal A ; terminal A ; A ::= ( A ( A ) *
NEW NEGATIVE TEST:  386 non-terminal A ; terminal A ; A ::= ( A ( A ) +
NEW NEGATIVE TEST:  387 non-terminal A ; terminal A ; A ::= ( A ( A ) ?
current stack: [ 16, 66, 38 ]
stack visited or empty!:  [ 16, 66, 38 ]
current stack: [ 16, 66, 38 ]
stack visited or empty!:  [ 16, 66, 38 ]
current stack: [ 16, 66, 38 ]
stack visited or empty!:  [ 16, 66, 38 ]
current stack: [ 16, 63 ]
visit node: LET NODE (63) for:
CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 63 ]
stack visited or empty!:  [ 16, 63 ]
current stack: [ 16, 61 ]
visit node: LET NODE (61) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 49 ]
visit node: LET NODE (49) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 43, 64 ]
visit node: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (64) (error, visited)
-- by "terminal" to (64) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (64) (error, visited)
-- by ";" to (66) (error, visited)
-- by "::=" to (64) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (66) (error, visited)
-- by "*" to (64) (normal, not visited)
-- by "+" to (64) (normal, not visited)
-- by "?" to (64) (normal, not visited)
NEW NEGATIVE TEST:  388 non-terminal A ; terminal A ; A ::= ( A | ( A A
NEW NEGATIVE TEST:  389 non-terminal A ; terminal A ; A ::= ( A | ( A A non-terminal
NEW NEGATIVE TEST:  390 non-terminal A ; terminal A ; A ::= ( A | ( A A terminal
NEW NEGATIVE TEST:  391 non-terminal A ; terminal A ; A ::= ( A | ( A A ,
NEW NEGATIVE TEST:  392 non-terminal A ; terminal A ; A ::= ( A | ( A A ;
NEW NEGATIVE TEST:  393 non-terminal A ; terminal A ; A ::= ( A | ( A A ::=
NEW NEGATIVE TEST:  394 non-terminal A ; terminal A ; A ::= ( A | ( A A |
current stack: [ 16, 43, 64 ]
stack visited or empty!:  [ 16, 43, 64 ]
current stack: [ 16, 43, 65 ]
visit node: LET NODE (65) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

current stack: [ 16, 43, 38 ]
visit node: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (38) (error, visited)
-- by "terminal" to (38) (error, visited)
-- by "," to (38) (error, visited)
-- by "::=" to (38) (error, visited)
-- by "*" to (38) (normal, not visited)
-- by "+" to (38) (normal, not visited)
-- by "?" to (38) (normal, not visited)
NEW NEGATIVE TEST:  395 non-terminal A ; terminal A ; A ::= ( A | ( A ) non-terminal
NEW NEGATIVE TEST:  396 non-terminal A ; terminal A ; A ::= ( A | ( A ) terminal
NEW NEGATIVE TEST:  397 non-terminal A ; terminal A ; A ::= ( A | ( A ) A
NEW NEGATIVE TEST:  398 non-terminal A ; terminal A ; A ::= ( A | ( A ) ,
NEW NEGATIVE TEST:  399 non-terminal A ; terminal A ; A ::= ( A | ( A ) ;
NEW NEGATIVE TEST:  400 non-terminal A ; terminal A ; A ::= ( A | ( A ) ::=
NEW NEGATIVE TEST:  401 non-terminal A ; terminal A ; A ::= ( A | ( A ) eps
NEW NEGATIVE TEST:  402 non-terminal A ; terminal A ; A ::= ( A | ( A ) (
NEW NEGATIVE TEST:  403 non-terminal A ; terminal A ; A ::= ( A | ( A ) )
NEW NEGATIVE TEST:  404 non-terminal A ; terminal A ; A ::= ( A | ( A ) |
current stack: [ 16, 43, 42 ]
visit node: LET NODE (42) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 43, 35 ]
stack visited or empty!:  [ 16, 43, 35 ]
current stack: [ 16, 43, 35 ]
stack visited or empty!:  [ 16, 43, 35 ]
current stack: [ 16, 43, 35 ]
stack visited or empty!:  [ 16, 43, 35 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 65 ]
stack visited or empty!:  [ 16, 65 ]
current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 42 ]
stack visited or empty!:  [ 16, 42 ]
current stack: [ 22, 31 ]
stack visited or empty!:  [ 22, 31 ]
current stack: [ 22, 15 ]
stack visited or empty!:  [ 22, 15 ]
current stack: [ 30 ]
stack visited or empty!:  [ 30 ]
current stack: [ 30 ]
stack visited or empty!:  [ 30 ]
current stack: [ 28 ]
stack visited or empty!:  [ 28 ]
current stack: [ 22, 64 ]
stack visited or empty!:  [ 22, 64 ]
current stack: [ 22, 64 ]
stack visited or empty!:  [ 22, 64 ]
current stack: [ 22, 65 ]
stack visited or empty!:  [ 22, 65 ]
current stack: [ 22, 38 ]
stack visited or empty!:  [ 22, 38 ]
current stack: [ 22, 64 ]
stack visited or empty!:  [ 22, 64 ]
current stack: [ 22, 64 ]
stack visited or empty!:  [ 22, 64 ]
current stack: [ 22, 64 ]
stack visited or empty!:  [ 22, 64 ]
current stack: [ 22 ]
stack visited or empty!:  [ 22 ]
current stack: [ 22, 38 ]
stack visited or empty!:  [ 22, 38 ]
current stack: [ 22, 38 ]
stack visited or empty!:  [ 22, 38 ]
current stack: [ 22, 38 ]
stack visited or empty!:  [ 22, 38 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 64 ]
stack visited or empty!:  [ 16, 64 ]
current stack: [ 16, 73 ]
visit node: LET NODE (73) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 43, 31 ]
stack visited or empty!:  [ 16, 43, 31 ]
current stack: [ 16, 43, 15 ]
stack visited or empty!:  [ 16, 43, 15 ]
current stack: [ 16, 50, 21 ]
visit node: CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (21) (error, visited)
-- by "terminal" to (21) (error, visited)
-- by "A" to (31) (normal, not visited)
-- by "," to (21) (error, visited)
-- by "::=" to (21) (error, visited)
-- by "eps" to (31) (normal, not visited)
-- by "(" to (15) (normal, not visited)
-- by "*" to (21) (error, visited)
-- by "+" to (21) (error, visited)
-- by "?" to (21) (error, visited)
NEW NEGATIVE TEST:  405 non-terminal A ; terminal A ; A ::= ( A | A |
NEW NEGATIVE TEST:  406 non-terminal A ; terminal A ; A ::= ( A | A | non-terminal
NEW NEGATIVE TEST:  407 non-terminal A ; terminal A ; A ::= ( A | A | terminal
NEW NEGATIVE TEST:  408 non-terminal A ; terminal A ; A ::= ( A | A | ,
NEW NEGATIVE TEST:  409 non-terminal A ; terminal A ; A ::= ( A | A | ;
NEW NEGATIVE TEST:  410 non-terminal A ; terminal A ; A ::= ( A | A | ::=
NEW NEGATIVE TEST:  411 non-terminal A ; terminal A ; A ::= ( A | A | )
NEW NEGATIVE TEST:  412 non-terminal A ; terminal A ; A ::= ( A | A | |
NEW NEGATIVE TEST:  413 non-terminal A ; terminal A ; A ::= ( A | A | *
NEW NEGATIVE TEST:  414 non-terminal A ; terminal A ; A ::= ( A | A | +
NEW NEGATIVE TEST:  415 non-terminal A ; terminal A ; A ::= ( A | A | ?
current stack: [ 16, 43, 64 ]
stack visited or empty!:  [ 16, 43, 64 ]
current stack: [ 16, 43, 64 ]
stack visited or empty!:  [ 16, 43, 64 ]
current stack: [ 16, 43, 65 ]
stack visited or empty!:  [ 16, 43, 65 ]
current stack: [ 16, 43, 38 ]
stack visited or empty!:  [ 16, 43, 38 ]
current stack: [ 16, 43, 64 ]
stack visited or empty!:  [ 16, 43, 64 ]
current stack: [ 16, 43, 64 ]
stack visited or empty!:  [ 16, 43, 64 ]
current stack: [ 16, 43, 64 ]
stack visited or empty!:  [ 16, 43, 64 ]
current stack: [ 16, 43 ]
stack visited or empty!:  [ 16, 43 ]
current stack: [ 16, 43, 38 ]
stack visited or empty!:  [ 16, 43, 38 ]
current stack: [ 16, 43, 38 ]
stack visited or empty!:  [ 16, 43, 38 ]
current stack: [ 16, 43, 38 ]
stack visited or empty!:  [ 16, 43, 38 ]
current stack: [ 16, 66, 15 ]
stack visited or empty!:  [ 16, 66, 15 ]
current stack: [ 16, 50, 31 ]
visit node: CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (31) (error, visited)
-- by "terminal" to (31) (error, visited)
-- by "," to (31) (error, visited)
-- by "::=" to (31) (error, visited)
-- by "*" to (31) (normal, not visited)
-- by "+" to (31) (normal, not visited)
-- by "?" to (31) (normal, not visited)
NEW NEGATIVE TEST:  416 non-terminal A ; terminal A ; A ::= ( A | A | A non-terminal
NEW NEGATIVE TEST:  417 non-terminal A ; terminal A ; A ::= ( A | A | A terminal
NEW NEGATIVE TEST:  418 non-terminal A ; terminal A ; A ::= ( A | A | A A
NEW NEGATIVE TEST:  419 non-terminal A ; terminal A ; A ::= ( A | A | A ,
NEW NEGATIVE TEST:  420 non-terminal A ; terminal A ; A ::= ( A | A | A ;
NEW NEGATIVE TEST:  421 non-terminal A ; terminal A ; A ::= ( A | A | A ::=
NEW NEGATIVE TEST:  422 non-terminal A ; terminal A ; A ::= ( A | A | A eps
NEW NEGATIVE TEST:  423 non-terminal A ; terminal A ; A ::= ( A | A | A (
NEW NEGATIVE TEST:  424 non-terminal A ; terminal A ; A ::= ( A | A | A )
NEW NEGATIVE TEST:  425 non-terminal A ; terminal A ; A ::= ( A | A | A |
current stack: [ 16, 50, 31 ]
stack visited or empty!:  [ 16, 50, 31 ]
current stack: [ 16, 50, 15 ]
visit node: CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]
transitions:
-- by "non-terminal" to (15) (error, visited)
-- by "terminal" to (15) (error, visited)
-- by "A" to (35) (normal, not visited)
-- by "," to (15) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (15) (error, visited)
-- by "eps" to (35) (normal, not visited)
-- by "(" to (37) (normal, not visited)
-- by ")" to (38) (error, visited)
-- by "|" to (42) (error, visited)
-- by "*" to (15) (error, visited)
-- by "+" to (15) (error, visited)
-- by "?" to (15) (error, visited)
NEW NEGATIVE TEST:  426 non-terminal A ; terminal A ; A ::= ( A | A | (
NEW NEGATIVE TEST:  427 non-terminal A ; terminal A ; A ::= ( A | A | ( non-terminal
NEW NEGATIVE TEST:  428 non-terminal A ; terminal A ; A ::= ( A | A | ( terminal
NEW NEGATIVE TEST:  429 non-terminal A ; terminal A ; A ::= ( A | A | ( ,
NEW NEGATIVE TEST:  430 non-terminal A ; terminal A ; A ::= ( A | A | ( ;
NEW NEGATIVE TEST:  431 non-terminal A ; terminal A ; A ::= ( A | A | ( ::=
NEW NEGATIVE TEST:  432 non-terminal A ; terminal A ; A ::= ( A | A | ( )
NEW NEGATIVE TEST:  433 non-terminal A ; terminal A ; A ::= ( A | A | ( |
NEW NEGATIVE TEST:  434 non-terminal A ; terminal A ; A ::= ( A | A | ( *
NEW NEGATIVE TEST:  435 non-terminal A ; terminal A ; A ::= ( A | A | ( +
NEW NEGATIVE TEST:  436 non-terminal A ; terminal A ; A ::= ( A | A | ( ?
current stack: [ 16, 50 ]
visit node: CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (50) (error, not visited)
-- by "terminal" to (50) (error, not visited)
-- by "A" to (58) (normal, not visited)
-- by "," to (50) (error, not visited)
-- by ";" to (50) (error, not visited)
-- by "::=" to (50) (error, not visited)
-- by "eps" to (58) (normal, not visited)
-- by "(" to (56) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (53) (normal, not visited)
-- by "*" to (50) (error, not visited)
-- by "+" to (50) (error, not visited)
-- by "?" to (50) (error, not visited)
NEW NEGATIVE TEST:  437 non-terminal A ; terminal A ; A ::= ( A | A | A
NEW NEGATIVE TEST:  438 non-terminal A ; terminal A ; A ::= ( A | A | A non-terminal
NEW NEGATIVE TEST:  439 non-terminal A ; terminal A ; A ::= ( A | A | A terminal
NEW NEGATIVE TEST:  440 non-terminal A ; terminal A ; A ::= ( A | A | A ,
NEW NEGATIVE TEST:  441 non-terminal A ; terminal A ; A ::= ( A | A | A ;
NEW NEGATIVE TEST:  442 non-terminal A ; terminal A ; A ::= ( A | A | A ::=
NEW NEGATIVE TEST:  443 non-terminal A ; terminal A ; A ::= ( A | A | A *
NEW NEGATIVE TEST:  444 non-terminal A ; terminal A ; A ::= ( A | A | A +
NEW NEGATIVE TEST:  445 non-terminal A ; terminal A ; A ::= ( A | A | A ?
current stack: [ 16, 50, 31 ]
stack visited or empty!:  [ 16, 50, 31 ]
current stack: [ 16, 50, 31 ]
stack visited or empty!:  [ 16, 50, 31 ]
current stack: [ 16, 50, 31 ]
stack visited or empty!:  [ 16, 50, 31 ]
current stack: [ 16, 50, 35 ]
visit node: CONFIGURATION (35): [item_3, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (35) (error, visited)
-- by "terminal" to (35) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (35) (error, visited)
-- by ";" to (36) (error, visited)
-- by "::=" to (35) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (42) (normal, not visited)
-- by "*" to (35) (normal, not visited)
-- by "+" to (35) (normal, not visited)
-- by "?" to (35) (normal, not visited)
NEW NEGATIVE TEST:  446 non-terminal A ; terminal A ; A ::= ( A | A | ( A
NEW NEGATIVE TEST:  447 non-terminal A ; terminal A ; A ::= ( A | A | ( A non-terminal
NEW NEGATIVE TEST:  448 non-terminal A ; terminal A ; A ::= ( A | A | ( A terminal
NEW NEGATIVE TEST:  449 non-terminal A ; terminal A ; A ::= ( A | A | ( A ,
NEW NEGATIVE TEST:  450 non-terminal A ; terminal A ; A ::= ( A | A | ( A ;
NEW NEGATIVE TEST:  451 non-terminal A ; terminal A ; A ::= ( A | A | ( A ::=
current stack: [ 16, 50, 35 ]
stack visited or empty!:  [ 16, 50, 35 ]
current stack: [ 16, 50, 37 ]
visit node: LET NODE (37) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (36): [item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4]

current stack: [ 16, 58 ]
visit node: LET NODE (58) for:
CONFIGURATION (31): [item_3] from [item_3, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 58 ]
stack visited or empty!:  [ 16, 58 ]
current stack: [ 16, 56 ]
visit node: LET NODE (56) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (50): [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 38 ]
stack visited or empty!:  [ 16, 38 ]
current stack: [ 16, 53 ]
visit node: CONFIGURATION (53): [item_0, item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4] from [item_with_bracket_or_3, item_with_bracket_or_1, <)>, item_4]
transitions:
-- by "non-terminal" to (53) (error, not visited)
-- by "terminal" to (53) (error, not visited)
-- by "A" to (58) (normal, not visited)
-- by "," to (53) (error, not visited)
-- by ";" to (50) (error, not visited)
-- by "::=" to (53) (error, not visited)
-- by "eps" to (58) (normal, not visited)
-- by "(" to (56) (normal, not visited)
-- by ")" to (38) (error, not visited)
-- by "|" to (53) (error, not visited)
-- by "*" to (53) (error, not visited)
-- by "+" to (53) (error, not visited)
-- by "?" to (53) (error, not visited)
NEW NEGATIVE TEST:  452 non-terminal A ; terminal A ; A ::= ( A | A | A |
NEW NEGATIVE TEST:  453 non-terminal A ; terminal A ; A ::= ( A | A | A | non-terminal
NEW NEGATIVE TEST:  454 non-terminal A ; terminal A ; A ::= ( A | A | A | terminal
NEW NEGATIVE TEST:  455 non-terminal A ; terminal A ; A ::= ( A | A | A | ,
NEW NEGATIVE TEST:  456 non-terminal A ; terminal A ; A ::= ( A | A | A | ;
NEW NEGATIVE TEST:  457 non-terminal A ; terminal A ; A ::= ( A | A | A | ::=
NEW NEGATIVE TEST:  458 non-terminal A ; terminal A ; A ::= ( A | A | A | )
NEW NEGATIVE TEST:  459 non-terminal A ; terminal A ; A ::= ( A | A | A | |
NEW NEGATIVE TEST:  460 non-terminal A ; terminal A ; A ::= ( A | A | A | *
NEW NEGATIVE TEST:  461 non-terminal A ; terminal A ; A ::= ( A | A | A | +
NEW NEGATIVE TEST:  462 non-terminal A ; terminal A ; A ::= ( A | A | A | ?
current stack: [ 16, 50, 64 ]
visit node: CONFIGURATION (64): [item_3, item_with_bracket_items_1, <)>, item_4] from [item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (64) (error, visited)
-- by "terminal" to (64) (error, visited)
-- by "A" to (64) (normal, not visited)
-- by "," to (64) (error, visited)
-- by ";" to (66) (error, visited)
-- by "::=" to (64) (error, visited)
-- by "eps" to (64) (normal, not visited)
-- by "(" to (65) (normal, not visited)
-- by ")" to (38) (normal, not visited)
-- by "|" to (66) (error, visited)
-- by "*" to (64) (normal, not visited)
-- by "+" to (64) (normal, not visited)
-- by "?" to (64) (normal, not visited)
NEW NEGATIVE TEST:  463 non-terminal A ; terminal A ; A ::= ( A | A | ( A A
NEW NEGATIVE TEST:  464 non-terminal A ; terminal A ; A ::= ( A | A | ( A A non-terminal
NEW NEGATIVE TEST:  465 non-terminal A ; terminal A ; A ::= ( A | A | ( A A terminal
NEW NEGATIVE TEST:  466 non-terminal A ; terminal A ; A ::= ( A | A | ( A A ,
NEW NEGATIVE TEST:  467 non-terminal A ; terminal A ; A ::= ( A | A | ( A A ;
NEW NEGATIVE TEST:  468 non-terminal A ; terminal A ; A ::= ( A | A | ( A A ::=
NEW NEGATIVE TEST:  469 non-terminal A ; terminal A ; A ::= ( A | A | ( A A |
current stack: [ 16, 50, 64 ]
stack visited or empty!:  [ 16, 50, 64 ]
current stack: [ 16, 50, 65 ]
visit node: LET NODE (65) for:
CONFIGURATION (15): [item_0, item_with_bracket_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_1, <)>, item_4, complex_item_1, complex_item_2, <;>, main_1]

CONFIGURATION (66): [item_with_bracket_items_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_items_1, <)>, item_4]

current stack: [ 16, 50, 38 ]
visit node: CONFIGURATION (38): [item_4] from [item_0, item_with_bracket_1, <)>, item_4]
transitions:
-- by "non-terminal" to (38) (error, visited)
-- by "terminal" to (38) (error, visited)
-- by "," to (38) (error, visited)
-- by "::=" to (38) (error, visited)
-- by "*" to (38) (normal, not visited)
-- by "+" to (38) (normal, not visited)
-- by "?" to (38) (normal, not visited)
NEW NEGATIVE TEST:  470 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) non-terminal
NEW NEGATIVE TEST:  471 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) terminal
NEW NEGATIVE TEST:  472 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) A
NEW NEGATIVE TEST:  473 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) ,
NEW NEGATIVE TEST:  474 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) ;
NEW NEGATIVE TEST:  475 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) ::=
NEW NEGATIVE TEST:  476 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) eps
NEW NEGATIVE TEST:  477 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) (
NEW NEGATIVE TEST:  478 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) )
NEW NEGATIVE TEST:  479 non-terminal A ; terminal A ; A ::= ( A | A | ( A ) |
current stack: [ 16, 50, 42 ]
visit node: LET NODE (42) for:
CONFIGURATION (21): [item_0] from [item_0, item_with_bracket_1, <)>, item_4, complex_item_3, complex_item_2, <;>, main_1]

CONFIGURATION (43): [item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4] from [item_0, item_with_bracket_1, <)>, item_4, item_with_bracket_or_2, item_with_bracket_or_1, <)>, item_4]

current stack: [ 16, 50, 35 ]
stack visited or empty!:  [ 16, 50, 35 ]
current stack: [ 16, 50, 35 ]
stack visited or empty!:  [ 16, 50, 35 ]
current stack: [ 16, 50, 35 ]
stack visited or empty!:  [ 16, 50, 35 ]
current stack: [ 16, 50, 31 ]
stack visited or empty!:  [ 16, 50, 31 ]
current stack: [ 16, 50, 15 ]
stack visited or empty!:  [ 16, 50, 15 ]
current stack: [ 16, 58 ]
stack visited or empty!:  [ 16, 58 ]
current stack: [ 16, 58 ]
stack visited or empty!:  [ 16, 58 ]
current stack: [ 16, 56 ]
stack visited or empty!:  [ 16, 56 ]
current stack: [ 16, 50, 64 ]
stack visited or empty!:  [ 16, 50, 64 ]
current stack: [ 16, 50, 64 ]
stack visited or empty!:  [ 16, 50, 64 ]
current stack: [ 16, 50, 65 ]
stack visited or empty!:  [ 16, 50, 65 ]
current stack: [ 16, 50, 38 ]
stack visited or empty!:  [ 16, 50, 38 ]
current stack: [ 16, 50, 64 ]
stack visited or empty!:  [ 16, 50, 64 ]
current stack: [ 16, 50, 64 ]
stack visited or empty!:  [ 16, 50, 64 ]
current stack: [ 16, 50, 64 ]
stack visited or empty!:  [ 16, 50, 64 ]
current stack: [ 16, 50 ]
stack visited or empty!:  [ 16, 50 ]
current stack: [ 16, 50, 38 ]
stack visited or empty!:  [ 16, 50, 38 ]
current stack: [ 16, 50, 38 ]
stack visited or empty!:  [ 16, 50, 38 ]
current stack: [ 16, 50, 38 ]
stack visited or empty!:  [ 16, 50, 38 ]
EEXIST: file already exists, mkdir 'D:\supercompilation\src\test-builder\tests\self'
